
TP1_Especial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005450  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000169c  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf8  08006bf8  00008028  2**0
                  CONTENTS
  4 .ARM          00000000  08006bf8  08006bf8  00008028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bf8  08006bf8  00008028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bf8  08006bf8  00007bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bfc  08006bfc  00007bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08006c00  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000028  08006c28  00008028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08006c28  0000827c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011232  00000000  00000000  00008051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002745  00000000  00000000  00019283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d52  00000000  00000000  0001cad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e10  00000000  00000000  0001d822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139e5  00000000  00000000  00036632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091af1  00000000  00000000  0004a017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbb08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000480c  00000000  00000000  000dbb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e0358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08005544 	.word	0x08005544

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08005544 	.word	0x08005544

0800014c <drawPixel>:
extern uint8_t _xstart;
extern uint8_t _ystart;


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
 8000156:	460b      	mov	r3, r1
 8000158:	80bb      	strh	r3, [r7, #4]
 800015a:	4613      	mov	r3, r2
 800015c:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 800015e:	88fb      	ldrh	r3, [r7, #6]
 8000160:	88b9      	ldrh	r1, [r7, #4]
 8000162:	887a      	ldrh	r2, [r7, #2]
 8000164:	4618      	mov	r0, r3
 8000166:	f000 fd79 	bl	8000c5c <ST7735_DrawPixel>
}
 800016a:	bf00      	nop
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}

08000172 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000172:	b590      	push	{r4, r7, lr}
 8000174:	b085      	sub	sp, #20
 8000176:	af02      	add	r7, sp, #8
 8000178:	4604      	mov	r4, r0
 800017a:	4608      	mov	r0, r1
 800017c:	4611      	mov	r1, r2
 800017e:	461a      	mov	r2, r3
 8000180:	4623      	mov	r3, r4
 8000182:	80fb      	strh	r3, [r7, #6]
 8000184:	4603      	mov	r3, r0
 8000186:	80bb      	strh	r3, [r7, #4]
 8000188:	460b      	mov	r3, r1
 800018a:	807b      	strh	r3, [r7, #2]
 800018c:	4613      	mov	r3, r2
 800018e:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000190:	88f8      	ldrh	r0, [r7, #6]
 8000192:	88b9      	ldrh	r1, [r7, #4]
 8000194:	887a      	ldrh	r2, [r7, #2]
 8000196:	883c      	ldrh	r4, [r7, #0]
 8000198:	8b3b      	ldrh	r3, [r7, #24]
 800019a:	9300      	str	r3, [sp, #0]
 800019c:	4623      	mov	r3, r4
 800019e:	f000 fe67 	bl	8000e70 <ST7735_FillRectangle>
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd90      	pop	{r4, r7, pc}

080001aa <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80001aa:	b580      	push	{r7, lr}
 80001ac:	b082      	sub	sp, #8
 80001ae:	af00      	add	r7, sp, #0
 80001b0:	4603      	mov	r3, r0
 80001b2:	80fb      	strh	r3, [r7, #6]
 80001b4:	460b      	mov	r3, r1
 80001b6:	80bb      	strh	r3, [r7, #4]
 80001b8:	4613      	mov	r3, r2
 80001ba:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 80001bc:	887a      	ldrh	r2, [r7, #2]
 80001be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80001c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80001c6:	4618      	mov	r0, r3
 80001c8:	f7ff ffc0 	bl	800014c <drawPixel>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80001d4:	b590      	push	{r4, r7, lr}
 80001d6:	b089      	sub	sp, #36	@ 0x24
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4604      	mov	r4, r0
 80001dc:	4608      	mov	r0, r1
 80001de:	4611      	mov	r1, r2
 80001e0:	461a      	mov	r2, r3
 80001e2:	4623      	mov	r3, r4
 80001e4:	80fb      	strh	r3, [r7, #6]
 80001e6:	4603      	mov	r3, r0
 80001e8:	80bb      	strh	r3, [r7, #4]
 80001ea:	460b      	mov	r3, r1
 80001ec:	807b      	strh	r3, [r7, #2]
 80001ee:	4613      	mov	r3, r2
 80001f0:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80001f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80001f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80001fa:	1ad3      	subs	r3, r2, r3
 80001fc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000200:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000204:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800020c:	1acb      	subs	r3, r1, r3
 800020e:	2b00      	cmp	r3, #0
 8000210:	bfb8      	it	lt
 8000212:	425b      	neglt	r3, r3
 8000214:	429a      	cmp	r2, r3
 8000216:	bfcc      	ite	gt
 8000218:	2301      	movgt	r3, #1
 800021a:	2300      	movle	r3, #0
 800021c:	b2db      	uxtb	r3, r3
 800021e:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8000220:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d00b      	beq.n	8000240 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8000228:	88fb      	ldrh	r3, [r7, #6]
 800022a:	833b      	strh	r3, [r7, #24]
 800022c:	88bb      	ldrh	r3, [r7, #4]
 800022e:	80fb      	strh	r3, [r7, #6]
 8000230:	8b3b      	ldrh	r3, [r7, #24]
 8000232:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8000234:	887b      	ldrh	r3, [r7, #2]
 8000236:	82fb      	strh	r3, [r7, #22]
 8000238:	883b      	ldrh	r3, [r7, #0]
 800023a:	807b      	strh	r3, [r7, #2]
 800023c:	8afb      	ldrh	r3, [r7, #22]
 800023e:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8000240:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000244:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	dd0b      	ble.n	8000264 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 800024c:	88fb      	ldrh	r3, [r7, #6]
 800024e:	82bb      	strh	r3, [r7, #20]
 8000250:	887b      	ldrh	r3, [r7, #2]
 8000252:	80fb      	strh	r3, [r7, #6]
 8000254:	8abb      	ldrh	r3, [r7, #20]
 8000256:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8000258:	88bb      	ldrh	r3, [r7, #4]
 800025a:	827b      	strh	r3, [r7, #18]
 800025c:	883b      	ldrh	r3, [r7, #0]
 800025e:	80bb      	strh	r3, [r7, #4]
 8000260:	8a7b      	ldrh	r3, [r7, #18]
 8000262:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000264:	887a      	ldrh	r2, [r7, #2]
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	1ad3      	subs	r3, r2, r3
 800026a:	b29b      	uxth	r3, r3
 800026c:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800026e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000272:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000276:	1ad3      	subs	r3, r2, r3
 8000278:	2b00      	cmp	r3, #0
 800027a:	bfb8      	it	lt
 800027c:	425b      	neglt	r3, r3
 800027e:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8000280:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000284:	0fda      	lsrs	r2, r3, #31
 8000286:	4413      	add	r3, r2
 8000288:	105b      	asrs	r3, r3, #1
 800028a:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 800028c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000290:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000294:	429a      	cmp	r2, r3
 8000296:	da02      	bge.n	800029e <writeLine+0xca>
        ystep = 1;
 8000298:	2301      	movs	r3, #1
 800029a:	83bb      	strh	r3, [r7, #28]
 800029c:	e031      	b.n	8000302 <writeLine+0x12e>
    } else {
        ystep = -1;
 800029e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80002a2:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80002a4:	e02d      	b.n	8000302 <writeLine+0x12e>
        if (steep) {
 80002a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d008      	beq.n	80002c0 <writeLine+0xec>
            writePixel(y0, x0, color);
 80002ae:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80002b0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80002b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff76 	bl	80001aa <writePixel>
 80002be:	e007      	b.n	80002d0 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 80002c0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80002c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80002c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ff6d 	bl	80001aa <writePixel>
        }
        err -= dy;
 80002d0:	8bfa      	ldrh	r2, [r7, #30]
 80002d2:	89fb      	ldrh	r3, [r7, #14]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 80002da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	da09      	bge.n	80002f6 <writeLine+0x122>
            y0 += ystep;
 80002e2:	88ba      	ldrh	r2, [r7, #4]
 80002e4:	8bbb      	ldrh	r3, [r7, #28]
 80002e6:	4413      	add	r3, r2
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80002ec:	8bfa      	ldrh	r2, [r7, #30]
 80002ee:	8a3b      	ldrh	r3, [r7, #16]
 80002f0:	4413      	add	r3, r2
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 80002f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	3301      	adds	r3, #1
 80002fe:	b29b      	uxth	r3, r3
 8000300:	80fb      	strh	r3, [r7, #6]
 8000302:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000306:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800030a:	429a      	cmp	r2, r3
 800030c:	ddcb      	ble.n	80002a6 <writeLine+0xd2>
        }
    }
}
 800030e:	bf00      	nop
 8000310:	bf00      	nop
 8000312:	3724      	adds	r7, #36	@ 0x24
 8000314:	46bd      	mov	sp, r7
 8000316:	bd90      	pop	{r4, r7, pc}

08000318 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b085      	sub	sp, #20
 800031c:	af02      	add	r7, sp, #8
 800031e:	4604      	mov	r4, r0
 8000320:	4608      	mov	r0, r1
 8000322:	4611      	mov	r1, r2
 8000324:	461a      	mov	r2, r3
 8000326:	4623      	mov	r3, r4
 8000328:	80fb      	strh	r3, [r7, #6]
 800032a:	4603      	mov	r3, r0
 800032c:	80bb      	strh	r3, [r7, #4]
 800032e:	460b      	mov	r3, r1
 8000330:	807b      	strh	r3, [r7, #2]
 8000332:	4613      	mov	r3, r2
 8000334:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 8000336:	88ba      	ldrh	r2, [r7, #4]
 8000338:	887b      	ldrh	r3, [r7, #2]
 800033a:	4413      	add	r3, r2
 800033c:	b29b      	uxth	r3, r3
 800033e:	3b01      	subs	r3, #1
 8000340:	b29b      	uxth	r3, r3
 8000342:	b21c      	sxth	r4, r3
 8000344:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000348:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800034c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000350:	883b      	ldrh	r3, [r7, #0]
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	4623      	mov	r3, r4
 8000356:	f7ff ff3d 	bl	80001d4 <writeLine>
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bd90      	pop	{r4, r7, pc}

08000362 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000362:	b590      	push	{r4, r7, lr}
 8000364:	b085      	sub	sp, #20
 8000366:	af02      	add	r7, sp, #8
 8000368:	4604      	mov	r4, r0
 800036a:	4608      	mov	r0, r1
 800036c:	4611      	mov	r1, r2
 800036e:	461a      	mov	r2, r3
 8000370:	4623      	mov	r3, r4
 8000372:	80fb      	strh	r3, [r7, #6]
 8000374:	4603      	mov	r3, r0
 8000376:	80bb      	strh	r3, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	807b      	strh	r3, [r7, #2]
 800037c:	4613      	mov	r3, r2
 800037e:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8000380:	88fa      	ldrh	r2, [r7, #6]
 8000382:	887b      	ldrh	r3, [r7, #2]
 8000384:	4413      	add	r3, r2
 8000386:	b29b      	uxth	r3, r3
 8000388:	3b01      	subs	r3, #1
 800038a:	b29b      	uxth	r3, r3
 800038c:	b21a      	sxth	r2, r3
 800038e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000392:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000396:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800039a:	883b      	ldrh	r3, [r7, #0]
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	4623      	mov	r3, r4
 80003a0:	f7ff ff18 	bl	80001d4 <writeLine>
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd90      	pop	{r4, r7, pc}

080003ac <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b087      	sub	sp, #28
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4604      	mov	r4, r0
 80003b4:	4608      	mov	r0, r1
 80003b6:	4611      	mov	r1, r2
 80003b8:	461a      	mov	r2, r3
 80003ba:	4623      	mov	r3, r4
 80003bc:	80fb      	strh	r3, [r7, #6]
 80003be:	4603      	mov	r3, r0
 80003c0:	80bb      	strh	r3, [r7, #4]
 80003c2:	460b      	mov	r3, r1
 80003c4:	807b      	strh	r3, [r7, #2]
 80003c6:	4613      	mov	r3, r2
 80003c8:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 80003ca:	887b      	ldrh	r3, [r7, #2]
 80003cc:	f1c3 0301 	rsb	r3, r3, #1
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80003d4:	2301      	movs	r3, #1
 80003d6:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80003d8:	887b      	ldrh	r3, [r7, #2]
 80003da:	461a      	mov	r2, r3
 80003dc:	03d2      	lsls	r2, r2, #15
 80003de:	1ad3      	subs	r3, r2, r3
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80003ea:	887b      	ldrh	r3, [r7, #2]
 80003ec:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 80003ee:	e0a5      	b.n	800053c <drawCircleHelper+0x190>
        if (f >= 0) {
 80003f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db0e      	blt.n	8000416 <drawCircleHelper+0x6a>
            y--;
 80003f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	3b01      	subs	r3, #1
 8000400:	b29b      	uxth	r3, r3
 8000402:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000404:	8a7b      	ldrh	r3, [r7, #18]
 8000406:	3302      	adds	r3, #2
 8000408:	b29b      	uxth	r3, r3
 800040a:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800040c:	8afa      	ldrh	r2, [r7, #22]
 800040e:	8a7b      	ldrh	r3, [r7, #18]
 8000410:	4413      	add	r3, r2
 8000412:	b29b      	uxth	r3, r3
 8000414:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000416:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800041a:	b29b      	uxth	r3, r3
 800041c:	3301      	adds	r3, #1
 800041e:	b29b      	uxth	r3, r3
 8000420:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000422:	8abb      	ldrh	r3, [r7, #20]
 8000424:	3302      	adds	r3, #2
 8000426:	b29b      	uxth	r3, r3
 8000428:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800042a:	8afa      	ldrh	r2, [r7, #22]
 800042c:	8abb      	ldrh	r3, [r7, #20]
 800042e:	4413      	add	r3, r2
 8000430:	b29b      	uxth	r3, r3
 8000432:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8000434:	787b      	ldrb	r3, [r7, #1]
 8000436:	f003 0304 	and.w	r3, r3, #4
 800043a:	2b00      	cmp	r3, #0
 800043c:	d01b      	beq.n	8000476 <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 800043e:	88fa      	ldrh	r2, [r7, #6]
 8000440:	8a3b      	ldrh	r3, [r7, #16]
 8000442:	4413      	add	r3, r2
 8000444:	b29b      	uxth	r3, r3
 8000446:	b218      	sxth	r0, r3
 8000448:	88ba      	ldrh	r2, [r7, #4]
 800044a:	89fb      	ldrh	r3, [r7, #14]
 800044c:	4413      	add	r3, r2
 800044e:	b29b      	uxth	r3, r3
 8000450:	b21b      	sxth	r3, r3
 8000452:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000454:	4619      	mov	r1, r3
 8000456:	f7ff fea8 	bl	80001aa <writePixel>
            writePixel(x0 + y, y0 + x, color);
 800045a:	88fa      	ldrh	r2, [r7, #6]
 800045c:	89fb      	ldrh	r3, [r7, #14]
 800045e:	4413      	add	r3, r2
 8000460:	b29b      	uxth	r3, r3
 8000462:	b218      	sxth	r0, r3
 8000464:	88ba      	ldrh	r2, [r7, #4]
 8000466:	8a3b      	ldrh	r3, [r7, #16]
 8000468:	4413      	add	r3, r2
 800046a:	b29b      	uxth	r3, r3
 800046c:	b21b      	sxth	r3, r3
 800046e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000470:	4619      	mov	r1, r3
 8000472:	f7ff fe9a 	bl	80001aa <writePixel>
        }
        if (cornername & 0x2) {
 8000476:	787b      	ldrb	r3, [r7, #1]
 8000478:	f003 0302 	and.w	r3, r3, #2
 800047c:	2b00      	cmp	r3, #0
 800047e:	d01b      	beq.n	80004b8 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 8000480:	88fa      	ldrh	r2, [r7, #6]
 8000482:	8a3b      	ldrh	r3, [r7, #16]
 8000484:	4413      	add	r3, r2
 8000486:	b29b      	uxth	r3, r3
 8000488:	b218      	sxth	r0, r3
 800048a:	88ba      	ldrh	r2, [r7, #4]
 800048c:	89fb      	ldrh	r3, [r7, #14]
 800048e:	1ad3      	subs	r3, r2, r3
 8000490:	b29b      	uxth	r3, r3
 8000492:	b21b      	sxth	r3, r3
 8000494:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000496:	4619      	mov	r1, r3
 8000498:	f7ff fe87 	bl	80001aa <writePixel>
            writePixel(x0 + y, y0 - x, color);
 800049c:	88fa      	ldrh	r2, [r7, #6]
 800049e:	89fb      	ldrh	r3, [r7, #14]
 80004a0:	4413      	add	r3, r2
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	b218      	sxth	r0, r3
 80004a6:	88ba      	ldrh	r2, [r7, #4]
 80004a8:	8a3b      	ldrh	r3, [r7, #16]
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	b21b      	sxth	r3, r3
 80004b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80004b2:	4619      	mov	r1, r3
 80004b4:	f7ff fe79 	bl	80001aa <writePixel>
        }
        if (cornername & 0x8) {
 80004b8:	787b      	ldrb	r3, [r7, #1]
 80004ba:	f003 0308 	and.w	r3, r3, #8
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d01b      	beq.n	80004fa <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 80004c2:	88fa      	ldrh	r2, [r7, #6]
 80004c4:	89fb      	ldrh	r3, [r7, #14]
 80004c6:	1ad3      	subs	r3, r2, r3
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	b218      	sxth	r0, r3
 80004cc:	88ba      	ldrh	r2, [r7, #4]
 80004ce:	8a3b      	ldrh	r3, [r7, #16]
 80004d0:	4413      	add	r3, r2
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	b21b      	sxth	r3, r3
 80004d6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80004d8:	4619      	mov	r1, r3
 80004da:	f7ff fe66 	bl	80001aa <writePixel>
            writePixel(x0 - x, y0 + y, color);
 80004de:	88fa      	ldrh	r2, [r7, #6]
 80004e0:	8a3b      	ldrh	r3, [r7, #16]
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	b218      	sxth	r0, r3
 80004e8:	88ba      	ldrh	r2, [r7, #4]
 80004ea:	89fb      	ldrh	r3, [r7, #14]
 80004ec:	4413      	add	r3, r2
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	b21b      	sxth	r3, r3
 80004f2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80004f4:	4619      	mov	r1, r3
 80004f6:	f7ff fe58 	bl	80001aa <writePixel>
        }
        if (cornername & 0x1) {
 80004fa:	787b      	ldrb	r3, [r7, #1]
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	2b00      	cmp	r3, #0
 8000502:	d01b      	beq.n	800053c <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 8000504:	88fa      	ldrh	r2, [r7, #6]
 8000506:	89fb      	ldrh	r3, [r7, #14]
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	b29b      	uxth	r3, r3
 800050c:	b218      	sxth	r0, r3
 800050e:	88ba      	ldrh	r2, [r7, #4]
 8000510:	8a3b      	ldrh	r3, [r7, #16]
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	b29b      	uxth	r3, r3
 8000516:	b21b      	sxth	r3, r3
 8000518:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800051a:	4619      	mov	r1, r3
 800051c:	f7ff fe45 	bl	80001aa <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8000520:	88fa      	ldrh	r2, [r7, #6]
 8000522:	8a3b      	ldrh	r3, [r7, #16]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	b29b      	uxth	r3, r3
 8000528:	b218      	sxth	r0, r3
 800052a:	88ba      	ldrh	r2, [r7, #4]
 800052c:	89fb      	ldrh	r3, [r7, #14]
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	b29b      	uxth	r3, r3
 8000532:	b21b      	sxth	r3, r3
 8000534:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000536:	4619      	mov	r1, r3
 8000538:	f7ff fe37 	bl	80001aa <writePixel>
    while (x<y) {
 800053c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000544:	429a      	cmp	r2, r3
 8000546:	f6ff af53 	blt.w	80003f0 <drawCircleHelper+0x44>
        }
    }
}
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	371c      	adds	r7, #28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}

08000554 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	4604      	mov	r4, r0
 800055c:	4608      	mov	r0, r1
 800055e:	4611      	mov	r1, r2
 8000560:	461a      	mov	r2, r3
 8000562:	4623      	mov	r3, r4
 8000564:	80fb      	strh	r3, [r7, #6]
 8000566:	4603      	mov	r3, r0
 8000568:	80bb      	strh	r3, [r7, #4]
 800056a:	460b      	mov	r3, r1
 800056c:	807b      	strh	r3, [r7, #2]
 800056e:	4613      	mov	r3, r2
 8000570:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8000572:	887b      	ldrh	r3, [r7, #2]
 8000574:	f1c3 0301 	rsb	r3, r3, #1
 8000578:	b29b      	uxth	r3, r3
 800057a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000580:	887b      	ldrh	r3, [r7, #2]
 8000582:	461a      	mov	r2, r3
 8000584:	03d2      	lsls	r2, r2, #15
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b29b      	uxth	r3, r3
 800058c:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000592:	887b      	ldrh	r3, [r7, #2]
 8000594:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8000596:	8a3b      	ldrh	r3, [r7, #16]
 8000598:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 800059a:	89fb      	ldrh	r3, [r7, #14]
 800059c:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 800059e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	3301      	adds	r3, #1
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 80005aa:	e095      	b.n	80006d8 <fillCircleHelper+0x184>
        if (f >= 0) {
 80005ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db0e      	blt.n	80005d2 <fillCircleHelper+0x7e>
            y--;
 80005b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	3b01      	subs	r3, #1
 80005bc:	b29b      	uxth	r3, r3
 80005be:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80005c0:	8a7b      	ldrh	r3, [r7, #18]
 80005c2:	3302      	adds	r3, #2
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 80005c8:	8afa      	ldrh	r2, [r7, #22]
 80005ca:	8a7b      	ldrh	r3, [r7, #18]
 80005cc:	4413      	add	r3, r2
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80005d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	3301      	adds	r3, #1
 80005da:	b29b      	uxth	r3, r3
 80005dc:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80005de:	8abb      	ldrh	r3, [r7, #20]
 80005e0:	3302      	adds	r3, #2
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80005e6:	8afa      	ldrh	r2, [r7, #22]
 80005e8:	8abb      	ldrh	r3, [r7, #20]
 80005ea:	4413      	add	r3, r2
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 80005f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80005f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	db31      	blt.n	8000660 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 80005fc:	787b      	ldrb	r3, [r7, #1]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	2b00      	cmp	r3, #0
 8000604:	d013      	beq.n	800062e <fillCircleHelper+0xda>
 8000606:	88fa      	ldrh	r2, [r7, #6]
 8000608:	8a3b      	ldrh	r3, [r7, #16]
 800060a:	4413      	add	r3, r2
 800060c:	b29b      	uxth	r3, r3
 800060e:	b218      	sxth	r0, r3
 8000610:	88ba      	ldrh	r2, [r7, #4]
 8000612:	89fb      	ldrh	r3, [r7, #14]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	b29b      	uxth	r3, r3
 8000618:	b219      	sxth	r1, r3
 800061a:	89fb      	ldrh	r3, [r7, #14]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	b29a      	uxth	r2, r3
 8000620:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000622:	4413      	add	r3, r2
 8000624:	b29b      	uxth	r3, r3
 8000626:	b21a      	sxth	r2, r3
 8000628:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800062a:	f7ff fe75 	bl	8000318 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 800062e:	787b      	ldrb	r3, [r7, #1]
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	2b00      	cmp	r3, #0
 8000636:	d013      	beq.n	8000660 <fillCircleHelper+0x10c>
 8000638:	88fa      	ldrh	r2, [r7, #6]
 800063a:	8a3b      	ldrh	r3, [r7, #16]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	b29b      	uxth	r3, r3
 8000640:	b218      	sxth	r0, r3
 8000642:	88ba      	ldrh	r2, [r7, #4]
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	b29b      	uxth	r3, r3
 800064a:	b219      	sxth	r1, r3
 800064c:	89fb      	ldrh	r3, [r7, #14]
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	b29a      	uxth	r2, r3
 8000652:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000654:	4413      	add	r3, r2
 8000656:	b29b      	uxth	r3, r3
 8000658:	b21a      	sxth	r2, r3
 800065a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800065c:	f7ff fe5c 	bl	8000318 <drawFastVLine>
        }
        if(y != py) {
 8000660:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000664:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000668:	429a      	cmp	r2, r3
 800066a:	d033      	beq.n	80006d4 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 800066c:	787b      	ldrb	r3, [r7, #1]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d013      	beq.n	800069e <fillCircleHelper+0x14a>
 8000676:	88fa      	ldrh	r2, [r7, #6]
 8000678:	897b      	ldrh	r3, [r7, #10]
 800067a:	4413      	add	r3, r2
 800067c:	b29b      	uxth	r3, r3
 800067e:	b218      	sxth	r0, r3
 8000680:	88ba      	ldrh	r2, [r7, #4]
 8000682:	89bb      	ldrh	r3, [r7, #12]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	b29b      	uxth	r3, r3
 8000688:	b219      	sxth	r1, r3
 800068a:	89bb      	ldrh	r3, [r7, #12]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	b29a      	uxth	r2, r3
 8000690:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000692:	4413      	add	r3, r2
 8000694:	b29b      	uxth	r3, r3
 8000696:	b21a      	sxth	r2, r3
 8000698:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800069a:	f7ff fe3d 	bl	8000318 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 800069e:	787b      	ldrb	r3, [r7, #1]
 80006a0:	f003 0302 	and.w	r3, r3, #2
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d013      	beq.n	80006d0 <fillCircleHelper+0x17c>
 80006a8:	88fa      	ldrh	r2, [r7, #6]
 80006aa:	897b      	ldrh	r3, [r7, #10]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	b218      	sxth	r0, r3
 80006b2:	88ba      	ldrh	r2, [r7, #4]
 80006b4:	89bb      	ldrh	r3, [r7, #12]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	b219      	sxth	r1, r3
 80006bc:	89bb      	ldrh	r3, [r7, #12]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80006cc:	f7ff fe24 	bl	8000318 <drawFastVLine>
            py = y;
 80006d0:	89fb      	ldrh	r3, [r7, #14]
 80006d2:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 80006d4:	8a3b      	ldrh	r3, [r7, #16]
 80006d6:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 80006d8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80006dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	f6ff af63 	blt.w	80005ac <fillCircleHelper+0x58>
    }
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	371c      	adds	r7, #28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	4604      	mov	r4, r0
 80006f8:	4608      	mov	r0, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	4623      	mov	r3, r4
 8000700:	80fb      	strh	r3, [r7, #6]
 8000702:	4603      	mov	r3, r0
 8000704:	80bb      	strh	r3, [r7, #4]
 8000706:	460b      	mov	r3, r1
 8000708:	807b      	strh	r3, [r7, #2]
 800070a:	4613      	mov	r3, r2
 800070c:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 800070e:	88ba      	ldrh	r2, [r7, #4]
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	b29b      	uxth	r3, r3
 8000716:	b219      	sxth	r1, r3
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	b29b      	uxth	r3, r3
 800071e:	3301      	adds	r3, #1
 8000720:	b29b      	uxth	r3, r3
 8000722:	b21a      	sxth	r2, r3
 8000724:	883b      	ldrh	r3, [r7, #0]
 8000726:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800072a:	f7ff fdf5 	bl	8000318 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 800072e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000732:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000736:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800073a:	883b      	ldrh	r3, [r7, #0]
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	2300      	movs	r3, #0
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2303      	movs	r3, #3
 8000744:	f7ff ff06 	bl	8000554 <fillCircleHelper>
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <drawRoundRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b087      	sub	sp, #28
 8000754:	af02      	add	r7, sp, #8
 8000756:	4604      	mov	r4, r0
 8000758:	4608      	mov	r0, r1
 800075a:	4611      	mov	r1, r2
 800075c:	461a      	mov	r2, r3
 800075e:	4623      	mov	r3, r4
 8000760:	80fb      	strh	r3, [r7, #6]
 8000762:	4603      	mov	r3, r0
 8000764:	80bb      	strh	r3, [r7, #4]
 8000766:	460b      	mov	r3, r1
 8000768:	807b      	strh	r3, [r7, #2]
 800076a:	4613      	mov	r3, r2
 800076c:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800076e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000772:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000776:	4293      	cmp	r3, r2
 8000778:	bfa8      	it	ge
 800077a:	4613      	movge	r3, r2
 800077c:	b21b      	sxth	r3, r3
 800077e:	0fda      	lsrs	r2, r3, #31
 8000780:	4413      	add	r3, r2
 8000782:	105b      	asrs	r3, r3, #1
 8000784:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000786:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800078a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800078e:	429a      	cmp	r2, r3
 8000790:	dd01      	ble.n	8000796 <drawRoundRect+0x46>
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	8c3b      	ldrh	r3, [r7, #32]
 800079a:	4413      	add	r3, r2
 800079c:	b29b      	uxth	r3, r3
 800079e:	b218      	sxth	r0, r3
 80007a0:	887a      	ldrh	r2, [r7, #2]
 80007a2:	8c3b      	ldrh	r3, [r7, #32]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007b4:	f7ff fdd5 	bl	8000362 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 80007b8:	88fa      	ldrh	r2, [r7, #6]
 80007ba:	8c3b      	ldrh	r3, [r7, #32]
 80007bc:	4413      	add	r3, r2
 80007be:	b29b      	uxth	r3, r3
 80007c0:	b218      	sxth	r0, r3
 80007c2:	88ba      	ldrh	r2, [r7, #4]
 80007c4:	883b      	ldrh	r3, [r7, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	3b01      	subs	r3, #1
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	b219      	sxth	r1, r3
 80007d0:	887a      	ldrh	r2, [r7, #2]
 80007d2:	8c3b      	ldrh	r3, [r7, #32]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	b29b      	uxth	r3, r3
 80007dc:	b21a      	sxth	r2, r3
 80007de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007e0:	f7ff fdbf 	bl	8000362 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 80007e4:	88ba      	ldrh	r2, [r7, #4]
 80007e6:	8c3b      	ldrh	r3, [r7, #32]
 80007e8:	4413      	add	r3, r2
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	b219      	sxth	r1, r3
 80007ee:	883a      	ldrh	r2, [r7, #0]
 80007f0:	8c3b      	ldrh	r3, [r7, #32]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000802:	f7ff fd89 	bl	8000318 <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000806:	88fa      	ldrh	r2, [r7, #6]
 8000808:	887b      	ldrh	r3, [r7, #2]
 800080a:	4413      	add	r3, r2
 800080c:	b29b      	uxth	r3, r3
 800080e:	3b01      	subs	r3, #1
 8000810:	b29b      	uxth	r3, r3
 8000812:	b218      	sxth	r0, r3
 8000814:	88ba      	ldrh	r2, [r7, #4]
 8000816:	8c3b      	ldrh	r3, [r7, #32]
 8000818:	4413      	add	r3, r2
 800081a:	b29b      	uxth	r3, r3
 800081c:	b219      	sxth	r1, r3
 800081e:	883a      	ldrh	r2, [r7, #0]
 8000820:	8c3b      	ldrh	r3, [r7, #32]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	b29b      	uxth	r3, r3
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	b29b      	uxth	r3, r3
 800082a:	b21a      	sxth	r2, r3
 800082c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800082e:	f7ff fd73 	bl	8000318 <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8000832:	88fa      	ldrh	r2, [r7, #6]
 8000834:	8c3b      	ldrh	r3, [r7, #32]
 8000836:	4413      	add	r3, r2
 8000838:	b29b      	uxth	r3, r3
 800083a:	b218      	sxth	r0, r3
 800083c:	88ba      	ldrh	r2, [r7, #4]
 800083e:	8c3b      	ldrh	r3, [r7, #32]
 8000840:	4413      	add	r3, r2
 8000842:	b29b      	uxth	r3, r3
 8000844:	b219      	sxth	r1, r3
 8000846:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800084a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2301      	movs	r3, #1
 8000850:	f7ff fdac 	bl	80003ac <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000854:	88fa      	ldrh	r2, [r7, #6]
 8000856:	887b      	ldrh	r3, [r7, #2]
 8000858:	4413      	add	r3, r2
 800085a:	b29a      	uxth	r2, r3
 800085c:	8c3b      	ldrh	r3, [r7, #32]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	b29b      	uxth	r3, r3
 8000862:	3b01      	subs	r3, #1
 8000864:	b29b      	uxth	r3, r3
 8000866:	b218      	sxth	r0, r3
 8000868:	88ba      	ldrh	r2, [r7, #4]
 800086a:	8c3b      	ldrh	r3, [r7, #32]
 800086c:	4413      	add	r3, r2
 800086e:	b29b      	uxth	r3, r3
 8000870:	b219      	sxth	r1, r3
 8000872:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000876:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2302      	movs	r3, #2
 800087c:	f7ff fd96 	bl	80003ac <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000880:	88fa      	ldrh	r2, [r7, #6]
 8000882:	887b      	ldrh	r3, [r7, #2]
 8000884:	4413      	add	r3, r2
 8000886:	b29a      	uxth	r2, r3
 8000888:	8c3b      	ldrh	r3, [r7, #32]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	b29b      	uxth	r3, r3
 800088e:	3b01      	subs	r3, #1
 8000890:	b29b      	uxth	r3, r3
 8000892:	b218      	sxth	r0, r3
 8000894:	88ba      	ldrh	r2, [r7, #4]
 8000896:	883b      	ldrh	r3, [r7, #0]
 8000898:	4413      	add	r3, r2
 800089a:	b29a      	uxth	r2, r3
 800089c:	8c3b      	ldrh	r3, [r7, #32]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	3b01      	subs	r3, #1
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b219      	sxth	r1, r3
 80008a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80008ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2304      	movs	r3, #4
 80008b2:	f7ff fd7b 	bl	80003ac <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	8c3b      	ldrh	r3, [r7, #32]
 80008ba:	4413      	add	r3, r2
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b218      	sxth	r0, r3
 80008c0:	88ba      	ldrh	r2, [r7, #4]
 80008c2:	883b      	ldrh	r3, [r7, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	8c3b      	ldrh	r3, [r7, #32]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	3b01      	subs	r3, #1
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	b219      	sxth	r1, r3
 80008d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80008d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2308      	movs	r3, #8
 80008de:	f7ff fd65 	bl	80003ac <drawCircleHelper>
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd90      	pop	{r4, r7, pc}
	...

080008ec <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <fillScreen+0x2c>)
 80008f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008fc:	4b07      	ldr	r3, [pc, #28]	@ (800091c <fillScreen+0x30>)
 80008fe:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	460b      	mov	r3, r1
 8000908:	2100      	movs	r1, #0
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fc31 	bl	8000172 <fillRect>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000044 	.word	0x20000044
 800091c:	20000046 	.word	0x20000046

08000920 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2101      	movs	r1, #1
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <ST7735_Select+0x14>)
 800092a:	f002 ff53 	bl	80037d4 <HAL_GPIO_WritePin>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40010c00 	.word	0x40010c00

08000938 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2101      	movs	r1, #1
 8000940:	4802      	ldr	r0, [pc, #8]	@ (800094c <ST7735_Unselect+0x14>)
 8000942:	f002 ff47 	bl	80037d4 <HAL_GPIO_WritePin>
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40010c00 	.word	0x40010c00

08000950 <ST7735_Reset>:

void ST7735_Reset()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2140      	movs	r1, #64	@ 0x40
 8000958:	4806      	ldr	r0, [pc, #24]	@ (8000974 <ST7735_Reset+0x24>)
 800095a:	f002 ff3b 	bl	80037d4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800095e:	2005      	movs	r0, #5
 8000960:	f001 ff50 	bl	8002804 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2140      	movs	r1, #64	@ 0x40
 8000968:	4802      	ldr	r0, [pc, #8]	@ (8000974 <ST7735_Reset+0x24>)
 800096a:	f002 ff33 	bl	80037d4 <HAL_GPIO_WritePin>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40010c00 	.word	0x40010c00

08000978 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <ST7735_WriteCommand+0x2c>)
 8000988:	f002 ff24 	bl	80037d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800098c:	1df9      	adds	r1, r7, #7
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	2201      	movs	r2, #1
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <ST7735_WriteCommand+0x30>)
 8000996:	f003 fd67 	bl	8004468 <HAL_SPI_Transmit>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010c00 	.word	0x40010c00
 80009a8:	200000b0 	.word	0x200000b0

080009ac <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2102      	movs	r1, #2
 80009ba:	4807      	ldr	r0, [pc, #28]	@ (80009d8 <ST7735_WriteData+0x2c>)
 80009bc:	f002 ff0a 	bl	80037d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	4804      	ldr	r0, [pc, #16]	@ (80009dc <ST7735_WriteData+0x30>)
 80009cc:	f003 fd4c 	bl	8004468 <HAL_SPI_Transmit>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40010c00 	.word	0x40010c00
 80009dc:	200000b0 	.word	0x200000b0

080009e0 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80009f2:	e034      	b.n	8000a5e <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80009fe:	7afb      	ldrb	r3, [r7, #11]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffb9 	bl	8000978 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	1c5a      	adds	r2, r3, #1
 8000a0a:	607a      	str	r2, [r7, #4]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000a10:	7abb      	ldrb	r3, [r7, #10]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a18:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000a1a:	7abb      	ldrb	r3, [r7, #10]
 8000a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a20:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000a22:	7abb      	ldrb	r3, [r7, #10]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d008      	beq.n	8000a3a <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000a28:	7abb      	ldrb	r3, [r7, #10]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ffbd 	bl	80009ac <ST7735_WriteData>
            addr += numArgs;
 8000a32:	7abb      	ldrb	r3, [r7, #10]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	4413      	add	r3, r2
 8000a38:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000a3a:	89bb      	ldrh	r3, [r7, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00e      	beq.n	8000a5e <DisplayInit+0x7e>
            ms = *addr++;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000a4a:	89bb      	ldrh	r3, [r7, #12]
 8000a4c:	2bff      	cmp	r3, #255	@ 0xff
 8000a4e:	d102      	bne.n	8000a56 <DisplayInit+0x76>
 8000a50:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000a54:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000a56:	89bb      	ldrh	r3, [r7, #12]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fed3 	bl	8002804 <HAL_Delay>
    while(numCommands--) {
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	1e5a      	subs	r2, r3, #1
 8000a62:	73fa      	strb	r2, [r7, #15]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1c5      	bne.n	80009f4 <DisplayInit+0x14>
        }
    }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4608      	mov	r0, r1
 8000a7e:	4611      	mov	r1, r2
 8000a80:	461a      	mov	r2, r3
 8000a82:	4623      	mov	r3, r4
 8000a84:	71fb      	strb	r3, [r7, #7]
 8000a86:	4603      	mov	r3, r0
 8000a88:	71bb      	strb	r3, [r7, #6]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	717b      	strb	r3, [r7, #5]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000a92:	202a      	movs	r0, #42	@ 0x2a
 8000a94:	f7ff ff70 	bl	8000978 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000a98:	2300      	movs	r3, #0
 8000a9a:	733b      	strb	r3, [r7, #12]
 8000a9c:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <ST7735_SetAddressWindow+0x88>)
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	737b      	strb	r3, [r7, #13]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73bb      	strb	r3, [r7, #14]
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <ST7735_SetAddressWindow+0x88>)
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	797b      	ldrb	r3, [r7, #5]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	2104      	movs	r1, #4
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff74 	bl	80009ac <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000ac4:	202b      	movs	r0, #43	@ 0x2b
 8000ac6:	f7ff ff57 	bl	8000978 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <ST7735_SetAddressWindow+0x8c>)
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	79bb      	ldrb	r3, [r7, #6]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <ST7735_SetAddressWindow+0x8c>)
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	793b      	ldrb	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff5f 	bl	80009ac <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000aee:	202c      	movs	r0, #44	@ 0x2c
 8000af0:	f7ff ff42 	bl	8000978 <ST7735_WriteCommand>
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	2000004b 	.word	0x2000004b
 8000b00:	2000004c 	.word	0x2000004c

08000b04 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000b0e:	f7ff ff07 	bl	8000920 <ST7735_Select>
    ST7735_Reset();
 8000b12:	f7ff ff1d 	bl	8000950 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000b16:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <ST7735_Init+0x44>)
 8000b18:	f7ff ff62 	bl	80009e0 <DisplayInit>
    DisplayInit(init_cmds2);
 8000b1c:	480b      	ldr	r0, [pc, #44]	@ (8000b4c <ST7735_Init+0x48>)
 8000b1e:	f7ff ff5f 	bl	80009e0 <DisplayInit>
    DisplayInit(init_cmds3);
 8000b22:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <ST7735_Init+0x4c>)
 8000b24:	f7ff ff5c 	bl	80009e0 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <ST7735_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <ST7735_Init+0x54>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f810 	bl	8000b5c <ST7735_SetRotation>
    ST7735_Unselect();
 8000b3c:	f7ff fefc 	bl	8000938 <ST7735_Unselect>

}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	08005658 	.word	0x08005658
 8000b4c:	08005690 	.word	0x08005690
 8000b50:	080056a0 	.word	0x080056a0
 8000b54:	20000049 	.word	0x20000049
 8000b58:	2000004a 	.word	0x2000004a

08000b5c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b33      	ldr	r3, [pc, #204]	@ (8000c40 <ST7735_SetRotation+0xe4>)
 8000b74:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000b76:	4b32      	ldr	r3, [pc, #200]	@ (8000c40 <ST7735_SetRotation+0xe4>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d84e      	bhi.n	8000c1c <ST7735_SetRotation+0xc0>
 8000b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b84 <ST7735_SetRotation+0x28>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000b95 	.word	0x08000b95
 8000b88:	08000bb7 	.word	0x08000bb7
 8000b8c:	08000bd9 	.word	0x08000bd9
 8000b90:	08000bfb 	.word	0x08000bfb
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000b94:	23c0      	movs	r3, #192	@ 0xc0
 8000b96:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000b98:	4b2a      	ldr	r3, [pc, #168]	@ (8000c44 <ST7735_SetRotation+0xe8>)
 8000b9a:	22a0      	movs	r2, #160	@ 0xa0
 8000b9c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <ST7735_SetRotation+0xec>)
 8000ba0:	2280      	movs	r2, #128	@ 0x80
 8000ba2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000ba4:	4b29      	ldr	r3, [pc, #164]	@ (8000c4c <ST7735_SetRotation+0xf0>)
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <ST7735_SetRotation+0xf4>)
 8000baa:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000bac:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <ST7735_SetRotation+0xf8>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	4b29      	ldr	r3, [pc, #164]	@ (8000c58 <ST7735_SetRotation+0xfc>)
 8000bb2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000bb4:	e032      	b.n	8000c1c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000bb6:	23a0      	movs	r3, #160	@ 0xa0
 8000bb8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000bba:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <ST7735_SetRotation+0xec>)
 8000bbc:	22a0      	movs	r2, #160	@ 0xa0
 8000bbe:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000bc0:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <ST7735_SetRotation+0xe8>)
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	@ (8000c4c <ST7735_SetRotation+0xf0>)
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	4b23      	ldr	r3, [pc, #140]	@ (8000c58 <ST7735_SetRotation+0xfc>)
 8000bcc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000bce:	4b21      	ldr	r3, [pc, #132]	@ (8000c54 <ST7735_SetRotation+0xf8>)
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <ST7735_SetRotation+0xf4>)
 8000bd4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000bd6:	e021      	b.n	8000c1c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <ST7735_SetRotation+0xe8>)
 8000bde:	22a0      	movs	r2, #160	@ 0xa0
 8000be0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <ST7735_SetRotation+0xec>)
 8000be4:	2280      	movs	r2, #128	@ 0x80
 8000be6:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000be8:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <ST7735_SetRotation+0xf0>)
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <ST7735_SetRotation+0xf4>)
 8000bee:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <ST7735_SetRotation+0xf8>)
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <ST7735_SetRotation+0xfc>)
 8000bf6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000bf8:	e010      	b.n	8000c1c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000bfa:	2360      	movs	r3, #96	@ 0x60
 8000bfc:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <ST7735_SetRotation+0xec>)
 8000c00:	22a0      	movs	r2, #160	@ 0xa0
 8000c02:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <ST7735_SetRotation+0xe8>)
 8000c06:	2280      	movs	r2, #128	@ 0x80
 8000c08:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <ST7735_SetRotation+0xf0>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <ST7735_SetRotation+0xfc>)
 8000c10:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <ST7735_SetRotation+0xf8>)
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <ST7735_SetRotation+0xf4>)
 8000c18:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000c1a:	bf00      	nop
  }
  ST7735_Select();
 8000c1c:	f7ff fe80 	bl	8000920 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000c20:	2036      	movs	r0, #54	@ 0x36
 8000c22:	f7ff fea9 	bl	8000978 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000c26:	f107 030f 	add.w	r3, r7, #15
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff febd 	bl	80009ac <ST7735_WriteData>
  ST7735_Unselect();
 8000c32:	f7ff fe81 	bl	8000938 <ST7735_Unselect>
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000048 	.word	0x20000048
 8000c44:	20000046 	.word	0x20000046
 8000c48:	20000044 	.word	0x20000044
 8000c4c:	20000049 	.word	0x20000049
 8000c50:	2000004b 	.word	0x2000004b
 8000c54:	2000004a 	.word	0x2000004a
 8000c58:	2000004c 	.word	0x2000004c

08000c5c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
 8000c66:	460b      	mov	r3, r1
 8000c68:	80bb      	strh	r3, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	4a17      	ldr	r2, [pc, #92]	@ (8000cd0 <ST7735_DrawPixel+0x74>)
 8000c72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c76:	4293      	cmp	r3, r2
 8000c78:	da26      	bge.n	8000cc8 <ST7735_DrawPixel+0x6c>
 8000c7a:	88bb      	ldrh	r3, [r7, #4]
 8000c7c:	4a15      	ldr	r2, [pc, #84]	@ (8000cd4 <ST7735_DrawPixel+0x78>)
 8000c7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c82:	4293      	cmp	r3, r2
 8000c84:	da20      	bge.n	8000cc8 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 8000c86:	f7ff fe4b 	bl	8000920 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	b2d8      	uxtb	r0, r3
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	b2d9      	uxtb	r1, r3
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	3301      	adds	r3, #1
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	88bb      	ldrh	r3, [r7, #4]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f7ff fee7 	bl	8000a74 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	733b      	strb	r3, [r7, #12]
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2102      	movs	r1, #2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe75 	bl	80009ac <ST7735_WriteData>

    ST7735_Unselect();
 8000cc2:	f7ff fe39 	bl	8000938 <ST7735_Unselect>
 8000cc6:	e000      	b.n	8000cca <ST7735_DrawPixel+0x6e>
        return;
 8000cc8:	bf00      	nop
}
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000044 	.word	0x20000044
 8000cd4:	20000046 	.word	0x20000046

08000cd8 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000cd8:	b082      	sub	sp, #8
 8000cda:	b590      	push	{r4, r7, lr}
 8000cdc:	b089      	sub	sp, #36	@ 0x24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	80bb      	strh	r3, [r7, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	b2d8      	uxtb	r0, r3
 8000cf2:	88bb      	ldrh	r3, [r7, #4]
 8000cf4:	b2d9      	uxtb	r1, r3
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000cfe:	4413      	add	r3, r2
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	3b01      	subs	r3, #1
 8000d04:	b2dc      	uxtb	r4, r3
 8000d06:	88bb      	ldrh	r3, [r7, #4]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000d0e:	4413      	add	r3, r2
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	3b01      	subs	r3, #1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	4622      	mov	r2, r4
 8000d18:	f7ff feac 	bl	8000a74 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
 8000d20:	e043      	b.n	8000daa <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000d22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000d24:	78fb      	ldrb	r3, [r7, #3]
 8000d26:	3b20      	subs	r3, #32
 8000d28:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000d2c:	fb01 f303 	mul.w	r3, r1, r3
 8000d30:	4619      	mov	r1, r3
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	440b      	add	r3, r1
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	4413      	add	r3, r2
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	e029      	b.n	8000d98 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00e      	beq.n	8000d72 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000d54:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000d56:	0a1b      	lsrs	r3, r3, #8
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	743b      	strb	r3, [r7, #16]
 8000d5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fe1e 	bl	80009ac <ST7735_WriteData>
 8000d70:	e00f      	b.n	8000d92 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000d72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000d76:	0a1b      	lsrs	r3, r3, #8
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	733b      	strb	r3, [r7, #12]
 8000d7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fe0d 	bl	80009ac <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	3301      	adds	r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d3cf      	bcc.n	8000d44 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	3301      	adds	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000dae:	461a      	mov	r2, r3
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d3b5      	bcc.n	8000d22 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	3724      	adds	r7, #36	@ 0x24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000dc2:	b002      	add	sp, #8
 8000dc4:	4770      	bx	lr
	...

08000dc8 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000dc8:	b082      	sub	sp, #8
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af04      	add	r7, sp, #16
 8000dd0:	603a      	str	r2, [r7, #0]
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	80fb      	strh	r3, [r7, #6]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000ddc:	f7ff fda0 	bl	8000920 <ST7735_Select>

    while(*str) {
 8000de0:	e033      	b.n	8000e4a <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	7d3a      	ldrb	r2, [r7, #20]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e68 <ST7735_WriteString+0xa0>)
 8000dea:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000dee:	4293      	cmp	r3, r2
 8000df0:	db16      	blt.n	8000e20 <ST7735_WriteString+0x58>
            x = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000df6:	7d7b      	ldrb	r3, [r7, #21]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000e00:	88bb      	ldrh	r3, [r7, #4]
 8000e02:	7d7a      	ldrb	r2, [r7, #21]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a19      	ldr	r2, [pc, #100]	@ (8000e6c <ST7735_WriteString+0xa4>)
 8000e08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	da21      	bge.n	8000e54 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b20      	cmp	r3, #32
 8000e16:	d103      	bne.n	8000e20 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	603b      	str	r3, [r7, #0]
                continue;
 8000e1e:	e014      	b.n	8000e4a <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	88b9      	ldrh	r1, [r7, #4]
 8000e26:	88f8      	ldrh	r0, [r7, #6]
 8000e28:	8c3b      	ldrh	r3, [r7, #32]
 8000e2a:	9302      	str	r3, [sp, #8]
 8000e2c:	8bbb      	ldrh	r3, [r7, #28]
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f7ff ff4f 	bl	8000cd8 <ST7735_WriteChar>
        x += font.width;
 8000e3a:	7d3b      	ldrb	r3, [r7, #20]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4413      	add	r3, r2
 8000e42:	80fb      	strh	r3, [r7, #6]
        str++;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1c7      	bne.n	8000de2 <ST7735_WriteString+0x1a>
 8000e52:	e000      	b.n	8000e56 <ST7735_WriteString+0x8e>
                break;
 8000e54:	bf00      	nop
    }

    ST7735_Unselect();
 8000e56:	f7ff fd6f 	bl	8000938 <ST7735_Unselect>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e64:	b002      	add	sp, #8
 8000e66:	4770      	bx	lr
 8000e68:	20000044 	.word	0x20000044
 8000e6c:	20000046 	.word	0x20000046

08000e70 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4623      	mov	r3, r4
 8000e80:	80fb      	strh	r3, [r7, #6]
 8000e82:	4603      	mov	r3, r0
 8000e84:	80bb      	strh	r3, [r7, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	807b      	strh	r3, [r7, #2]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	4a37      	ldr	r2, [pc, #220]	@ (8000f70 <ST7735_FillRectangle+0x100>)
 8000e92:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e96:	4293      	cmp	r3, r2
 8000e98:	da66      	bge.n	8000f68 <ST7735_FillRectangle+0xf8>
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	4a35      	ldr	r2, [pc, #212]	@ (8000f74 <ST7735_FillRectangle+0x104>)
 8000e9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	da60      	bge.n	8000f68 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	887b      	ldrh	r3, [r7, #2]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a30      	ldr	r2, [pc, #192]	@ (8000f70 <ST7735_FillRectangle+0x100>)
 8000eae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	dd06      	ble.n	8000ec4 <ST7735_FillRectangle+0x54>
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f70 <ST7735_FillRectangle+0x100>)
 8000eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000ec4:	88ba      	ldrh	r2, [r7, #4]
 8000ec6:	883b      	ldrh	r3, [r7, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a2a      	ldr	r2, [pc, #168]	@ (8000f74 <ST7735_FillRectangle+0x104>)
 8000ecc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	dd06      	ble.n	8000ee2 <ST7735_FillRectangle+0x72>
 8000ed4:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <ST7735_FillRectangle+0x104>)
 8000ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	88bb      	ldrh	r3, [r7, #4]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000ee2:	f7ff fd1d 	bl	8000920 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	b2d8      	uxtb	r0, r3
 8000eea:	88bb      	ldrh	r3, [r7, #4]
 8000eec:	b2d9      	uxtb	r1, r3
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b2dc      	uxtb	r4, r3
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	883b      	ldrh	r3, [r7, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4413      	add	r3, r2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4622      	mov	r2, r4
 8000f10:	f7ff fdb0 	bl	8000a74 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000f14:	8c3b      	ldrh	r3, [r7, #32]
 8000f16:	0a1b      	lsrs	r3, r3, #8
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	733b      	strb	r3, [r7, #12]
 8000f1e:	8c3b      	ldrh	r3, [r7, #32]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2102      	movs	r1, #2
 8000f28:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <ST7735_FillRectangle+0x108>)
 8000f2a:	f002 fc53 	bl	80037d4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000f2e:	883b      	ldrh	r3, [r7, #0]
 8000f30:	80bb      	strh	r3, [r7, #4]
 8000f32:	e013      	b.n	8000f5c <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	80fb      	strh	r3, [r7, #6]
 8000f38:	e00a      	b.n	8000f50 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000f3a:	f107 010c 	add.w	r1, r7, #12
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	2202      	movs	r2, #2
 8000f44:	480d      	ldr	r0, [pc, #52]	@ (8000f7c <ST7735_FillRectangle+0x10c>)
 8000f46:	f003 fa8f 	bl	8004468 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	80fb      	strh	r3, [r7, #6]
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f1      	bne.n	8000f3a <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	80bb      	strh	r3, [r7, #4]
 8000f5c:	88bb      	ldrh	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1e8      	bne.n	8000f34 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000f62:	f7ff fce9 	bl	8000938 <ST7735_Unselect>
 8000f66:	e000      	b.n	8000f6a <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000f68:	bf00      	nop
}
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	20000044 	.word	0x20000044
 8000f74:	20000046 	.word	0x20000046
 8000f78:	40010c00 	.word	0x40010c00
 8000f7c:	200000b0 	.word	0x200000b0

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f86:	f001 fbdb 	bl	8002740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8a:	f000 f895 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8e:	f000 fa1b 	bl	80013c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f92:	f000 f8ed 	bl	8001170 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f96:	f000 f99f 	bl	80012d8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000f9a:	f000 f9e9 	bl	8001370 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8000f9e:	f000 f925 	bl	80011ec <MX_ADC2_Init>
  MX_SPI1_Init();
 8000fa2:	f000 f961 	bl	8001268 <MX_SPI1_Init>
  //La maquina de estados comienza desde el estado de configuracion, por tanto se inicializa el ADC que
  //mide el potenciometro del trigger y la pantalla.


  //Inicializacion de la pantalla.
  ST7735_Init(2);
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f7ff fdac 	bl	8000b04 <ST7735_Init>
  ST7735_SetRotation(2);
 8000fac:	2002      	movs	r0, #2
 8000fae:	f7ff fdd5 	bl	8000b5c <ST7735_SetRotation>
  plotConfig();
 8000fb2:	f000 faa1 	bl	80014f8 <plotConfig>
  fillCircle( 21, 75, 5, BLUE);
 8000fb6:	231f      	movs	r3, #31
 8000fb8:	2205      	movs	r2, #5
 8000fba:	214b      	movs	r1, #75	@ 0x4b
 8000fbc:	2015      	movs	r0, #21
 8000fbe:	f7ff fb97 	bl	80006f0 <fillCircle>

  //Para almacenar en formato string el valor medido del trigger.
  char value[4];
  uint16_t valor_anterior = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	80fb      	strh	r3, [r7, #6]


  while (1)
  {

	  if(UART_TX_PING_flag == 1){
 8000fc6:	4b35      	ldr	r3, [pc, #212]	@ (800109c <main+0x11c>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d104      	bne.n	8000fda <main+0x5a>

		  UART_TX_PING_flag = 0;
 8000fd0:	4b32      	ldr	r3, [pc, #200]	@ (800109c <main+0x11c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
		  UART_TX_PING();
 8000fd6:	f000 fd99 	bl	8001b0c <UART_TX_PING>
	  }
	  if(UART_TX_PONG_flag == 1){
 8000fda:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <main+0x120>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <main+0x6e>

		  UART_TX_PONG_flag = 0;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80010a0 <main+0x120>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
		  UART_TX_PONG();
 8000fea:	f000 fd9d 	bl	8001b28 <UART_TX_PONG>
	  }
	  if(ADC_TRIGGER_flag == 1){
 8000fee:	4b2d      	ldr	r3, [pc, #180]	@ (80010a4 <main+0x124>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d1e6      	bne.n	8000fc6 <main+0x46>

			HAL_ADC_Start(&hadc2);
 8000ff8:	482b      	ldr	r0, [pc, #172]	@ (80010a8 <main+0x128>)
 8000ffa:	f001 fcff 	bl	80029fc <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc2, 50) == HAL_OK){
 8000ffe:	2132      	movs	r1, #50	@ 0x32
 8001000:	4829      	ldr	r0, [pc, #164]	@ (80010a8 <main+0x128>)
 8001002:	f001 fdd5 	bl	8002bb0 <HAL_ADC_PollForConversion>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1dc      	bne.n	8000fc6 <main+0x46>


				if(OFFSET == 1){
 800100c:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <main+0x12c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d10a      	bne.n	800102c <main+0xac>
					trigger_valor = (HAL_ADC_GetValue(&hadc2)>>4) & 0XFF;
 8001016:	4824      	ldr	r0, [pc, #144]	@ (80010a8 <main+0x128>)
 8001018:	f001 fed0 	bl	8002dbc <HAL_ADC_GetValue>
 800101c:	4603      	mov	r3, r0
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	b29b      	uxth	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	b29a      	uxth	r2, r3
 8001026:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <main+0x130>)
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	e009      	b.n	8001040 <main+0xc0>
				}
				else{
					trigger_valor = HAL_ADC_GetValue(&hadc2) & 0XFFF;
 800102c:	481e      	ldr	r0, [pc, #120]	@ (80010a8 <main+0x128>)
 800102e:	f001 fec5 	bl	8002dbc <HAL_ADC_GetValue>
 8001032:	4603      	mov	r3, r0
 8001034:	b29b      	uxth	r3, r3
 8001036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <main+0x130>)
 800103e:	801a      	strh	r2, [r3, #0]
				}

				if(valor_anterior != trigger_valor){
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <main+0x130>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	429a      	cmp	r2, r3
 800104a:	d01f      	beq.n	800108c <main+0x10c>

					fillRect(45, 50, 45, 15, BLACK);
 800104c:	2300      	movs	r3, #0
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	230f      	movs	r3, #15
 8001052:	222d      	movs	r2, #45	@ 0x2d
 8001054:	2132      	movs	r1, #50	@ 0x32
 8001056:	202d      	movs	r0, #45	@ 0x2d
 8001058:	f7ff f88b 	bl	8000172 <fillRect>
					itoa(trigger_valor, value, 10);
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <main+0x130>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	b29b      	uxth	r3, r3
 8001062:	4618      	mov	r0, r3
 8001064:	463b      	mov	r3, r7
 8001066:	220a      	movs	r2, #10
 8001068:	4619      	mov	r1, r3
 800106a:	f004 f9fb 	bl	8005464 <itoa>
					ST7735_WriteString(45, 50, value, Font_11x18, color(31,44,0), BLACK);
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <main+0x134>)
 8001070:	4639      	mov	r1, r7
 8001072:	2200      	movs	r2, #0
 8001074:	9202      	str	r2, [sp, #8]
 8001076:	f64f 5280 	movw	r2, #64896	@ 0xfd80
 800107a:	9201      	str	r2, [sp, #4]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	9200      	str	r2, [sp, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	460a      	mov	r2, r1
 8001084:	2132      	movs	r1, #50	@ 0x32
 8001086:	202d      	movs	r0, #45	@ 0x2d
 8001088:	f7ff fe9e 	bl	8000dc8 <ST7735_WriteString>

				}

				valor_anterior = trigger_valor;
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <main+0x130>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	80fb      	strh	r3, [r7, #6]
				HAL_Delay(300);
 8001092:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001096:	f001 fbb5 	bl	8002804 <HAL_Delay>
	  if(UART_TX_PING_flag == 1){
 800109a:	e794      	b.n	8000fc6 <main+0x46>
 800109c:	20000198 	.word	0x20000198
 80010a0:	20000199 	.word	0x20000199
 80010a4:	20000271 	.word	0x20000271
 80010a8:	20000080 	.word	0x20000080
 80010ac:	20000014 	.word	0x20000014
 80010b0:	20000010 	.word	0x20000010
 80010b4:	20000008 	.word	0x20000008

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	@ 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c2:	2228      	movs	r2, #40	@ 0x28
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 fa10 	bl	80054ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f6:	2301      	movs	r3, #1
 80010f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001104:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fbaa 	bl	8003868 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800111a:	f001 f927 	bl	800236c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2102      	movs	r1, #2
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fe16 	bl	8003d6c <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001146:	f001 f911 	bl	800236c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800114a:	2302      	movs	r3, #2
 800114c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800114e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001152:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4618      	mov	r0, r3
 8001158:	f002 ff96 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001162:	f001 f903 	bl	800236c <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	@ 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_ADC1_Init+0x74>)
 8001182:	4a19      	ldr	r2, [pc, #100]	@ (80011e8 <MX_ADC1_Init+0x78>)
 8001184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <MX_ADC1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <MX_ADC1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_ADC1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_ADC1_Init+0x74>)
 800119a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800119e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a0:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <MX_ADC1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_ADC1_Init+0x74>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ac:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <MX_ADC1_Init+0x74>)
 80011ae:	f001 fb4d 	bl	800284c <HAL_ADC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f001 f8d8 	bl	800236c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <MX_ADC1_Init+0x74>)
 80011ce:	f001 fed3 	bl	8002f78 <HAL_ADC_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011d8:	f001 f8c8 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000050 	.word	0x20000050
 80011e8:	40012400 	.word	0x40012400

080011ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <MX_ADC2_Init+0x74>)
 80011fe:	4a19      	ldr	r2, [pc, #100]	@ (8001264 <MX_ADC2_Init+0x78>)
 8001200:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MX_ADC2_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <MX_ADC2_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_ADC2_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_ADC2_Init+0x74>)
 8001216:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800121a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121c:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <MX_ADC2_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_ADC2_Init+0x74>)
 8001224:	2201      	movs	r2, #1
 8001226:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001228:	480d      	ldr	r0, [pc, #52]	@ (8001260 <MX_ADC2_Init+0x74>)
 800122a:	f001 fb0f 	bl	800284c <HAL_ADC_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001234:	f001 f89a 	bl	800236c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001238:	2302      	movs	r3, #2
 800123a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123c:	2301      	movs	r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_ADC2_Init+0x74>)
 800124a:	f001 fe95 	bl	8002f78 <HAL_ADC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001254:	f001 f88a 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000080 	.word	0x20000080
 8001264:	40012800 	.word	0x40012800

08001268 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_SPI1_Init+0x68>)
 800126e:	4a19      	ldr	r2, [pc, #100]	@ (80012d4 <MX_SPI1_Init+0x6c>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_SPI1_Init+0x68>)
 8001274:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_SPI1_Init+0x68>)
 800127c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001280:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <MX_SPI1_Init+0x68>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_SPI1_Init+0x68>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <MX_SPI1_Init+0x68>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001294:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_SPI1_Init+0x68>)
 8001296:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800129a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_SPI1_Init+0x68>)
 800129e:	2218      	movs	r2, #24
 80012a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_SPI1_Init+0x68>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_SPI1_Init+0x68>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <MX_SPI1_Init+0x68>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_SPI1_Init+0x68>)
 80012b6:	220a      	movs	r2, #10
 80012b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_SPI1_Init+0x68>)
 80012bc:	f003 f850 	bl	8004360 <HAL_SPI_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80012c6:	f001 f851 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000b0 	.word	0x200000b0
 80012d4:	40013000 	.word	0x40013000

080012d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <MX_TIM2_Init+0x94>)
 80012f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <MX_TIM2_Init+0x94>)
 80012fe:	2247      	movs	r2, #71	@ 0x47
 8001300:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_TIM2_Init+0x94>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 17-1;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <MX_TIM2_Init+0x94>)
 800130a:	2210      	movs	r2, #16
 800130c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_TIM2_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_TIM2_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131a:	4814      	ldr	r0, [pc, #80]	@ (800136c <MX_TIM2_Init+0x94>)
 800131c:	f003 fa8e 	bl	800483c <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001326:	f001 f821 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	@ (800136c <MX_TIM2_Init+0x94>)
 8001338:	f003 fc58 	bl	8004bec <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001342:	f001 f813 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <MX_TIM2_Init+0x94>)
 8001354:	f003 fe2e 	bl	8004fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800135e:	f001 f805 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000108 	.word	0x20000108

08001370 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_USART3_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <MX_USART3_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 950000;
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <MX_USART3_UART_Init+0x4c>)
 800137c:	4a11      	ldr	r2, [pc, #68]	@ (80013c4 <MX_USART3_UART_Init+0x54>)
 800137e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001380:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_USART3_UART_Init+0x4c>)
 8001382:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001386:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_USART3_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <MX_USART3_UART_Init+0x4c>)
 8001390:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001394:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_USART3_UART_Init+0x4c>)
 8001398:	2208      	movs	r2, #8
 800139a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <MX_USART3_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_USART3_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	@ (80013bc <MX_USART3_UART_Init+0x4c>)
 80013aa:	f003 fe73 	bl	8005094 <HAL_UART_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 80013b4:	f000 ffda 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000150 	.word	0x20000150
 80013c0:	40004800 	.word	0x40004800
 80013c4:	000e7ef0 	.word	0x000e7ef0

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013dc:	4b41      	ldr	r3, [pc, #260]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a40      	ldr	r2, [pc, #256]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b3e      	ldr	r3, [pc, #248]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f4:	4b3b      	ldr	r3, [pc, #236]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a3a      	ldr	r2, [pc, #232]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 80013fa:	f043 0320 	orr.w	r3, r3, #32
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b38      	ldr	r3, [pc, #224]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0320 	and.w	r3, r3, #32
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b35      	ldr	r3, [pc, #212]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a34      	ldr	r2, [pc, #208]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b32      	ldr	r3, [pc, #200]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	4b2f      	ldr	r3, [pc, #188]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a2e      	ldr	r2, [pc, #184]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <MX_GPIO_Init+0x11c>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001442:	4829      	ldr	r0, [pc, #164]	@ (80014e8 <MX_GPIO_Init+0x120>)
 8001444:	f002 f9c6 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_TIMER_INTERRUPT_Pin|DEBUG_BUFFER_LLENO_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	210a      	movs	r1, #10
 800144c:	4827      	ldr	r0, [pc, #156]	@ (80014ec <MX_GPIO_Init+0x124>)
 800144e:	f002 f9c1 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|DC_Pin|RESET_Pin|DEBUG_ADC1_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	21c3      	movs	r1, #195	@ 0xc3
 8001456:	4826      	ldr	r0, [pc, #152]	@ (80014f0 <MX_GPIO_Init+0x128>)
 8001458:	f002 f9bc 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800145c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2302      	movs	r3, #2
 800146c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4619      	mov	r1, r3
 8001474:	481c      	ldr	r0, [pc, #112]	@ (80014e8 <MX_GPIO_Init+0x120>)
 8001476:	f002 f829 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_TIMER_INTERRUPT_Pin DEBUG_BUFFER_LLENO_Pin */
  GPIO_InitStruct.Pin = DEBUG_TIMER_INTERRUPT_Pin|DEBUG_BUFFER_LLENO_Pin;
 800147a:	230a      	movs	r3, #10
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2302      	movs	r3, #2
 8001488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	4619      	mov	r1, r3
 8001490:	4816      	ldr	r0, [pc, #88]	@ (80014ec <MX_GPIO_Init+0x124>)
 8001492:	f002 f81b 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_OK_Pin BOTON_FLECHA_Pin BOTON_ESC_Pin */
  GPIO_InitStruct.Pin = BOTON_OK_Pin|BOTON_FLECHA_Pin|BOTON_ESC_Pin;
 8001496:	23e0      	movs	r3, #224	@ 0xe0
 8001498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <MX_GPIO_Init+0x12c>)
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4619      	mov	r1, r3
 80014a8:	4810      	ldr	r0, [pc, #64]	@ (80014ec <MX_GPIO_Init+0x124>)
 80014aa:	f002 f80f 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RESET_Pin DEBUG_ADC1_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RESET_Pin|DEBUG_ADC1_Pin;
 80014ae:	23c3      	movs	r3, #195	@ 0xc3
 80014b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4619      	mov	r1, r3
 80014c4:	480a      	ldr	r0, [pc, #40]	@ (80014f0 <MX_GPIO_Init+0x128>)
 80014c6:	f002 f801 	bl	80034cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2017      	movs	r0, #23
 80014d0:	f001 ffc5 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014d4:	2017      	movs	r0, #23
 80014d6:	f001 ffde 	bl	8003496 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40010800 	.word	0x40010800
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	10110000 	.word	0x10110000

080014f8 <plotConfig>:

/* USER CODE BEGIN 4 */

void plotConfig(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af04      	add	r7, sp, #16

	  fillScreen(BLACK);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff f9f4 	bl	80008ec <fillScreen>
	  drawRoundRect(0, 0, MAX_X, MAX_Y, 10, BLUE);
 8001504:	231f      	movs	r3, #31
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	230a      	movs	r3, #10
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	239f      	movs	r3, #159	@ 0x9f
 800150e:	227f      	movs	r2, #127	@ 0x7f
 8001510:	2100      	movs	r1, #0
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff f91c 	bl	8000750 <drawRoundRect>


	  ST7735_WriteString(18, 10, "OSCILOSCOPIO", Font_7x10, WHITE, BLACK);
 8001518:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <plotConfig+0xd0>)
 800151a:	2200      	movs	r2, #0
 800151c:	9202      	str	r2, [sp, #8]
 800151e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	9200      	str	r2, [sp, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a28      	ldr	r2, [pc, #160]	@ (80015cc <plotConfig+0xd4>)
 800152c:	210a      	movs	r1, #10
 800152e:	2012      	movs	r0, #18
 8001530:	f7ff fc4a 	bl	8000dc8 <ST7735_WriteString>
	  ST7735_WriteString(18, 25, "CONFIGURACION", Font_7x10, WHITE, BLACK);
 8001534:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <plotConfig+0xd0>)
 8001536:	2200      	movs	r2, #0
 8001538:	9202      	str	r2, [sp, #8]
 800153a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800153e:	9201      	str	r2, [sp, #4]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	9200      	str	r2, [sp, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a22      	ldr	r2, [pc, #136]	@ (80015d0 <plotConfig+0xd8>)
 8001548:	2119      	movs	r1, #25
 800154a:	2012      	movs	r0, #18
 800154c:	f7ff fc3c 	bl	8000dc8 <ST7735_WriteString>


	  ST7735_WriteString(35, 70, "Inicio", Font_7x10, BLACK, YELLOW);
 8001550:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <plotConfig+0xd0>)
 8001552:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001556:	9202      	str	r2, [sp, #8]
 8001558:	2200      	movs	r2, #0
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	9200      	str	r2, [sp, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1c      	ldr	r2, [pc, #112]	@ (80015d4 <plotConfig+0xdc>)
 8001564:	2146      	movs	r1, #70	@ 0x46
 8001566:	2023      	movs	r0, #35	@ 0x23
 8001568:	f7ff fc2e 	bl	8000dc8 <ST7735_WriteString>
	  ST7735_WriteString(35, 90, "Resolucion", Font_7x10, BLACK, YELLOW);
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <plotConfig+0xd0>)
 800156e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001572:	9202      	str	r2, [sp, #8]
 8001574:	2200      	movs	r2, #0
 8001576:	9201      	str	r2, [sp, #4]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a16      	ldr	r2, [pc, #88]	@ (80015d8 <plotConfig+0xe0>)
 8001580:	215a      	movs	r1, #90	@ 0x5a
 8001582:	2023      	movs	r0, #35	@ 0x23
 8001584:	f7ff fc20 	bl	8000dc8 <ST7735_WriteString>
	  ST7735_WriteString(35, 110, "Trigger", Font_7x10, BLACK, YELLOW);
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <plotConfig+0xd0>)
 800158a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800158e:	9202      	str	r2, [sp, #8]
 8001590:	2200      	movs	r2, #0
 8001592:	9201      	str	r2, [sp, #4]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	9200      	str	r2, [sp, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a10      	ldr	r2, [pc, #64]	@ (80015dc <plotConfig+0xe4>)
 800159c:	216e      	movs	r1, #110	@ 0x6e
 800159e:	2023      	movs	r0, #35	@ 0x23
 80015a0:	f7ff fc12 	bl	8000dc8 <ST7735_WriteString>
	  ST7735_WriteString(35, 130, "Muestras", Font_7x10, BLACK, YELLOW);
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <plotConfig+0xd0>)
 80015a6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80015aa:	9202      	str	r2, [sp, #8]
 80015ac:	2200      	movs	r2, #0
 80015ae:	9201      	str	r2, [sp, #4]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <plotConfig+0xe8>)
 80015b8:	2182      	movs	r1, #130	@ 0x82
 80015ba:	2023      	movs	r0, #35	@ 0x23
 80015bc:	f7ff fc04 	bl	8000dc8 <ST7735_WriteString>
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000000 	.word	0x20000000
 80015cc:	0800555c 	.word	0x0800555c
 80015d0:	0800556c 	.word	0x0800556c
 80015d4:	0800557c 	.word	0x0800557c
 80015d8:	08005584 	.word	0x08005584
 80015dc:	08005590 	.word	0x08005590
 80015e0:	08005598 	.word	0x08005598

080015e4 <plotInicio>:

void plotInicio(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af04      	add	r7, sp, #16

	  fillScreen(BLACK);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff f97e 	bl	80008ec <fillScreen>
	  drawRoundRect(0, 0, MAX_X, MAX_Y, 10, color(3,47,3));
 80015f0:	f641 53e3 	movw	r3, #7651	@ 0x1de3
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	230a      	movs	r3, #10
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	239f      	movs	r3, #159	@ 0x9f
 80015fc:	227f      	movs	r2, #127	@ 0x7f
 80015fe:	2100      	movs	r1, #0
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff f8a5 	bl	8000750 <drawRoundRect>

	  ST7735_WriteString(40, 40, "MODO: ", Font_11x18, WHITE, BLACK);
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <plotInicio+0x60>)
 8001608:	2200      	movs	r2, #0
 800160a:	9202      	str	r2, [sp, #8]
 800160c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001610:	9201      	str	r2, [sp, #4]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	9200      	str	r2, [sp, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <plotInicio+0x64>)
 800161a:	2128      	movs	r1, #40	@ 0x28
 800161c:	2028      	movs	r0, #40	@ 0x28
 800161e:	f7ff fbd3 	bl	8000dc8 <ST7735_WriteString>
	  ST7735_WriteString(20, 80, "Transmitiendo", Font_7x10, GREEN, BLACK);
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <plotInicio+0x68>)
 8001624:	2200      	movs	r2, #0
 8001626:	9202      	str	r2, [sp, #8]
 8001628:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800162c:	9201      	str	r2, [sp, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	9200      	str	r2, [sp, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a06      	ldr	r2, [pc, #24]	@ (8001650 <plotInicio+0x6c>)
 8001636:	2150      	movs	r1, #80	@ 0x50
 8001638:	2014      	movs	r0, #20
 800163a:	f7ff fbc5 	bl	8000dc8 <ST7735_WriteString>
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000008 	.word	0x20000008
 8001648:	080055a4 	.word	0x080055a4
 800164c:	20000000 	.word	0x20000000
 8001650:	080055ac 	.word	0x080055ac

08001654 <plotResolucion>:

void plotResolucion(){
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af04      	add	r7, sp, #16

	fillScreen(BLACK);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff f946 	bl	80008ec <fillScreen>
	drawRoundRect(0, 0, MAX_X, MAX_Y, 10, color(4,47,25));
 8001660:	f242 53f9 	movw	r3, #9721	@ 0x25f9
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	230a      	movs	r3, #10
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	239f      	movs	r3, #159	@ 0x9f
 800166c:	227f      	movs	r2, #127	@ 0x7f
 800166e:	2100      	movs	r1, #0
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff f86d 	bl	8000750 <drawRoundRect>
	ST7735_WriteString(10, 10, "Configuracion", Font_7x10, WHITE, BLACK);
 8001676:	4b1d      	ldr	r3, [pc, #116]	@ (80016ec <plotResolucion+0x98>)
 8001678:	2200      	movs	r2, #0
 800167a:	9202      	str	r2, [sp, #8]
 800167c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001680:	9201      	str	r2, [sp, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	9200      	str	r2, [sp, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	@ (80016f0 <plotResolucion+0x9c>)
 800168a:	210a      	movs	r1, #10
 800168c:	200a      	movs	r0, #10
 800168e:	f7ff fb9b 	bl	8000dc8 <ST7735_WriteString>
	ST7735_WriteString(10, 25, "de la Resolucion", Font_7x10, WHITE, BLACK);
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <plotResolucion+0x98>)
 8001694:	2200      	movs	r2, #0
 8001696:	9202      	str	r2, [sp, #8]
 8001698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800169c:	9201      	str	r2, [sp, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a13      	ldr	r2, [pc, #76]	@ (80016f4 <plotResolucion+0xa0>)
 80016a6:	2119      	movs	r1, #25
 80016a8:	200a      	movs	r0, #10
 80016aa:	f7ff fb8d 	bl	8000dc8 <ST7735_WriteString>

	ST7735_WriteString(50, 70, "8 bits", Font_7x10, WHITE, BLACK);
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <plotResolucion+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	9202      	str	r2, [sp, #8]
 80016b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016b8:	9201      	str	r2, [sp, #4]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	9200      	str	r2, [sp, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0d      	ldr	r2, [pc, #52]	@ (80016f8 <plotResolucion+0xa4>)
 80016c2:	2146      	movs	r1, #70	@ 0x46
 80016c4:	2032      	movs	r0, #50	@ 0x32
 80016c6:	f7ff fb7f 	bl	8000dc8 <ST7735_WriteString>
	ST7735_WriteString(50, 90, "12 bits", Font_7x10, WHITE, BLACK);
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <plotResolucion+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	9202      	str	r2, [sp, #8]
 80016d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d4:	9201      	str	r2, [sp, #4]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	9200      	str	r2, [sp, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a07      	ldr	r2, [pc, #28]	@ (80016fc <plotResolucion+0xa8>)
 80016de:	215a      	movs	r1, #90	@ 0x5a
 80016e0:	2032      	movs	r0, #50	@ 0x32
 80016e2:	f7ff fb71 	bl	8000dc8 <ST7735_WriteString>

}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000000 	.word	0x20000000
 80016f0:	080055bc 	.word	0x080055bc
 80016f4:	080055cc 	.word	0x080055cc
 80016f8:	080055e0 	.word	0x080055e0
 80016fc:	080055e8 	.word	0x080055e8

08001700 <plotTrigger>:

void plotTrigger(){
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af04      	add	r7, sp, #16

	fillScreen(BLACK);
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff f8f0 	bl	80008ec <fillScreen>
	drawRoundRect(0, 0, MAX_X, MAX_Y, 10, color(26,34,31));
 800170c:	f24d 435f 	movw	r3, #54367	@ 0xd45f
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	230a      	movs	r3, #10
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	239f      	movs	r3, #159	@ 0x9f
 8001718:	227f      	movs	r2, #127	@ 0x7f
 800171a:	2100      	movs	r1, #0
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff f817 	bl	8000750 <drawRoundRect>
	ST7735_WriteString(15, 10, "Configuracion", Font_7x10, WHITE, BLACK);
 8001722:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <plotTrigger+0x98>)
 8001724:	2200      	movs	r2, #0
 8001726:	9202      	str	r2, [sp, #8]
 8001728:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800172c:	9201      	str	r2, [sp, #4]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	9200      	str	r2, [sp, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	@ (800179c <plotTrigger+0x9c>)
 8001736:	210a      	movs	r1, #10
 8001738:	200f      	movs	r0, #15
 800173a:	f7ff fb45 	bl	8000dc8 <ST7735_WriteString>
	ST7735_WriteString(15, 25, "del Trigger", Font_7x10, WHITE, BLACK);
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <plotTrigger+0x98>)
 8001740:	2200      	movs	r2, #0
 8001742:	9202      	str	r2, [sp, #8]
 8001744:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001748:	9201      	str	r2, [sp, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	9200      	str	r2, [sp, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a13      	ldr	r2, [pc, #76]	@ (80017a0 <plotTrigger+0xa0>)
 8001752:	2119      	movs	r1, #25
 8001754:	200f      	movs	r0, #15
 8001756:	f7ff fb37 	bl	8000dc8 <ST7735_WriteString>


	ST7735_WriteString(35, 100, "Ascendente", Font_7x10, WHITE, BLACK);
 800175a:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <plotTrigger+0x98>)
 800175c:	2200      	movs	r2, #0
 800175e:	9202      	str	r2, [sp, #8]
 8001760:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001764:	9201      	str	r2, [sp, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	9200      	str	r2, [sp, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <plotTrigger+0xa4>)
 800176e:	2164      	movs	r1, #100	@ 0x64
 8001770:	2023      	movs	r0, #35	@ 0x23
 8001772:	f7ff fb29 	bl	8000dc8 <ST7735_WriteString>
	ST7735_WriteString(35, 120, "Descendente", Font_7x10, WHITE, BLACK);
 8001776:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <plotTrigger+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	9202      	str	r2, [sp, #8]
 800177c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001780:	9201      	str	r2, [sp, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	9200      	str	r2, [sp, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a07      	ldr	r2, [pc, #28]	@ (80017a8 <plotTrigger+0xa8>)
 800178a:	2178      	movs	r1, #120	@ 0x78
 800178c:	2023      	movs	r0, #35	@ 0x23
 800178e:	f7ff fb1b 	bl	8000dc8 <ST7735_WriteString>

}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000000 	.word	0x20000000
 800179c:	080055bc 	.word	0x080055bc
 80017a0:	080055f0 	.word	0x080055f0
 80017a4:	080055fc 	.word	0x080055fc
 80017a8:	08005608 	.word	0x08005608

080017ac <plotMuestras>:

void plotMuestras(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af04      	add	r7, sp, #16

	fillScreen(BLACK);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff f89a 	bl	80008ec <fillScreen>
	drawRoundRect(0, 0, MAX_X, MAX_Y, 10, color(0,58,31));
 80017b8:	f240 735f 	movw	r3, #1887	@ 0x75f
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	230a      	movs	r3, #10
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	239f      	movs	r3, #159	@ 0x9f
 80017c4:	227f      	movs	r2, #127	@ 0x7f
 80017c6:	2100      	movs	r1, #0
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7fe ffc1 	bl	8000750 <drawRoundRect>
	ST7735_WriteString(15, 10, "Configuracion", Font_7x10, WHITE, BLACK);
 80017ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <plotMuestras+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	9202      	str	r2, [sp, #8]
 80017d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017d8:	9201      	str	r2, [sp, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a19      	ldr	r2, [pc, #100]	@ (8001848 <plotMuestras+0x9c>)
 80017e2:	210a      	movs	r1, #10
 80017e4:	200f      	movs	r0, #15
 80017e6:	f7ff faef 	bl	8000dc8 <ST7735_WriteString>
	ST7735_WriteString(15, 25, "de las muestras", Font_7x10, WHITE, BLACK);
 80017ea:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <plotMuestras+0x98>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	9202      	str	r2, [sp, #8]
 80017f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017f4:	9201      	str	r2, [sp, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	9200      	str	r2, [sp, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a13      	ldr	r2, [pc, #76]	@ (800184c <plotMuestras+0xa0>)
 80017fe:	2119      	movs	r1, #25
 8001800:	200f      	movs	r0, #15
 8001802:	f7ff fae1 	bl	8000dc8 <ST7735_WriteString>


	ST7735_WriteString(35, 80, "500 muestras", Font_7x10, WHITE, BLACK);
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <plotMuestras+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	9202      	str	r2, [sp, #8]
 800180c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001810:	9201      	str	r2, [sp, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	9200      	str	r2, [sp, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <plotMuestras+0xa4>)
 800181a:	2150      	movs	r1, #80	@ 0x50
 800181c:	2023      	movs	r0, #35	@ 0x23
 800181e:	f7ff fad3 	bl	8000dc8 <ST7735_WriteString>
	ST7735_WriteString(35, 100, "1000 muestras", Font_7x10, WHITE, BLACK);
 8001822:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <plotMuestras+0x98>)
 8001824:	2200      	movs	r2, #0
 8001826:	9202      	str	r2, [sp, #8]
 8001828:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800182c:	9201      	str	r2, [sp, #4]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	9200      	str	r2, [sp, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <plotMuestras+0xa8>)
 8001836:	2164      	movs	r1, #100	@ 0x64
 8001838:	2023      	movs	r0, #35	@ 0x23
 800183a:	f7ff fac5 	bl	8000dc8 <ST7735_WriteString>

}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000000 	.word	0x20000000
 8001848:	080055bc 	.word	0x080055bc
 800184c:	08005614 	.word	0x08005614
 8001850:	08005624 	.word	0x08005624
 8001854:	08005634 	.word	0x08005634

08001858 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == BOTON_OK_Pin){
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	2b20      	cmp	r3, #32
 8001866:	d108      	bne.n	800187a <HAL_GPIO_EXTI_Callback+0x22>

		evt = boton_OK;
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
		fsm(&estado, evt);
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	4810      	ldr	r0, [pc, #64]	@ (80018b8 <HAL_GPIO_EXTI_Callback+0x60>)
 8001876:	f000 f965 	bl	8001b44 <fsm>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}
	if(GPIO_Pin == BOTON_FLECHA_Pin){
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	2b40      	cmp	r3, #64	@ 0x40
 800187e:	d108      	bne.n	8001892 <HAL_GPIO_EXTI_Callback+0x3a>

		evt = boton_FLECHA;
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
		fsm(&estado, evt);
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	480a      	ldr	r0, [pc, #40]	@ (80018b8 <HAL_GPIO_EXTI_Callback+0x60>)
 800188e:	f000 f959 	bl	8001b44 <fsm>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}
	if(GPIO_Pin == BOTON_ESC_Pin){
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	2b80      	cmp	r3, #128	@ 0x80
 8001896:	d108      	bne.n	80018aa <HAL_GPIO_EXTI_Callback+0x52>

		evt = boton_ESC;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]
		fsm(&estado, evt);
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <HAL_GPIO_EXTI_Callback+0x60>)
 80018a6:	f000 f94d 	bl	8001b44 <fsm>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000001a 	.word	0x2000001a
 80018b8:	20000274 	.word	0x20000274

080018bc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2){
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018cc:	d129      	bne.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_GPIO_TogglePin(GPIOA, DEBUG_TIMER_INTERRUPT_Pin);
 80018ce:	2102      	movs	r1, #2
 80018d0:	4816      	ldr	r0, [pc, #88]	@ (800192c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80018d2:	f001 ff97 	bl	8003804 <HAL_GPIO_TogglePin>

		switch(ADC_Conversion()){
 80018d6:	f000 f82f 	bl	8001938 <ADC_Conversion>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d002      	beq.n	80018e6 <HAL_TIM_PeriodElapsedCallback+0x2a>
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d014      	beq.n	800190e <HAL_TIM_PeriodElapsedCallback+0x52>
		case 2:
			evt = trigger_disparado;
			fsm(&estado, evt);
			break;
		default:
			break;
 80018e4:	e01d      	b.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x66>
			HAL_GPIO_WritePin(DEBUG_BUFFER_LLENO_GPIO_Port, DEBUG_BUFFER_LLENO_Pin, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2108      	movs	r1, #8
 80018ea:	4810      	ldr	r0, [pc, #64]	@ (800192c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80018ec:	f001 ff72 	bl	80037d4 <HAL_GPIO_WritePin>
			evt = evt_buffer_lleno;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80018f2:	2203      	movs	r2, #3
 80018f4:	701a      	strb	r2, [r3, #0]
			fsm(&estado, evt);
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4619      	mov	r1, r3
 80018fc:	480d      	ldr	r0, [pc, #52]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80018fe:	f000 f921 	bl	8001b44 <fsm>
			HAL_GPIO_WritePin(DEBUG_BUFFER_LLENO_GPIO_Port, DEBUG_BUFFER_LLENO_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2108      	movs	r1, #8
 8001906:	4809      	ldr	r0, [pc, #36]	@ (800192c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001908:	f001 ff64 	bl	80037d4 <HAL_GPIO_WritePin>
			break;
 800190c:	e009      	b.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x66>
			evt = trigger_disparado;
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001910:	2204      	movs	r2, #4
 8001912:	701a      	strb	r2, [r3, #0]
			fsm(&estado, evt);
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800191c:	f000 f912 	bl	8001b44 <fsm>
			break;
 8001920:	bf00      	nop
		}

	}

}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40010800 	.word	0x40010800
 8001930:	2000001a 	.word	0x2000001a
 8001934:	20000274 	.word	0x20000274

08001938 <ADC_Conversion>:

uint8_t ADC_Conversion(){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0


	uint16_t valor_medido = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 8001942:	4853      	ldr	r0, [pc, #332]	@ (8001a90 <ADC_Conversion+0x158>)
 8001944:	f001 f85a 	bl	80029fc <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 0) == HAL_OK) {
 8001948:	2100      	movs	r1, #0
 800194a:	4851      	ldr	r0, [pc, #324]	@ (8001a90 <ADC_Conversion+0x158>)
 800194c:	f001 f930 	bl	8002bb0 <HAL_ADC_PollForConversion>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 8096 	bne.w	8001a84 <ADC_Conversion+0x14c>
	    //HAL_GPIO_WritePin(GPIOB, DEBUG_ADC1_Pin, GPIO_PIN_SET);

	    uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8001958:	484d      	ldr	r0, [pc, #308]	@ (8001a90 <ADC_Conversion+0x158>)
 800195a:	f001 fa2f 	bl	8002dbc <HAL_ADC_GetValue>
 800195e:	6038      	str	r0, [r7, #0]
	    if (OFFSET == 1) {
 8001960:	4b4c      	ldr	r3, [pc, #304]	@ (8001a94 <ADC_Conversion+0x15c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d10a      	bne.n	8001980 <ADC_Conversion+0x48>
	        *puntero_escritura = (adc_value >> 4) & 0xFF;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	091a      	lsrs	r2, r3, #4
 800196e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a98 <ADC_Conversion+0x160>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]
	        valor_medido = *puntero_escritura;
 8001976:	4b48      	ldr	r3, [pc, #288]	@ (8001a98 <ADC_Conversion+0x160>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	80fb      	strh	r3, [r7, #6]
 800197e:	e010      	b.n	80019a2 <ADC_Conversion+0x6a>
	    } else { // OFFSET = 2
	        *puntero_escritura = (adc_value >> 8) & 0x0F;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b44      	ldr	r3, [pc, #272]	@ (8001a98 <ADC_Conversion+0x160>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f002 020f 	and.w	r2, r2, #15
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]
	        *(puntero_escritura + 1) = adc_value & 0xFF;
 8001992:	4b41      	ldr	r3, [pc, #260]	@ (8001a98 <ADC_Conversion+0x160>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]
	        //valor_medido = ((*puntero_escritura) << 8) + *(puntero_escritura + 1);
	        valor_medido = adc_value;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	80fb      	strh	r3, [r7, #6]
	    }


	    if (trigger_flag == 1) {
 80019a2:	4b3e      	ldr	r3, [pc, #248]	@ (8001a9c <ADC_Conversion+0x164>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d11b      	bne.n	80019e4 <ADC_Conversion+0xac>
	        if ((flanco == 0 && (valor_medido < trigger_valor_09)) || (flanco == 1 && (valor_medido > trigger_valor_11)) ) {
 80019ac:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa0 <ADC_Conversion+0x168>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d105      	bne.n	80019c2 <ADC_Conversion+0x8a>
 80019b6:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <ADC_Conversion+0x16c>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	88fa      	ldrh	r2, [r7, #6]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d30a      	bcc.n	80019d8 <ADC_Conversion+0xa0>
 80019c2:	4b37      	ldr	r3, [pc, #220]	@ (8001aa0 <ADC_Conversion+0x168>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d10b      	bne.n	80019e4 <ADC_Conversion+0xac>
 80019cc:	4b36      	ldr	r3, [pc, #216]	@ (8001aa8 <ADC_Conversion+0x170>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d905      	bls.n	80019e4 <ADC_Conversion+0xac>
	            trigger_en_condiciones = 1;
 80019d8:	4b34      	ldr	r3, [pc, #208]	@ (8001aac <ADC_Conversion+0x174>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
	            trigger_flag = 0;
 80019de:	4b2f      	ldr	r3, [pc, #188]	@ (8001a9c <ADC_Conversion+0x164>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
	        }
	    }

	    if (trigger_en_condiciones == 1) {
 80019e4:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <ADC_Conversion+0x174>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d11b      	bne.n	8001a26 <ADC_Conversion+0xee>
	        if ((flanco == 0 && (valor_medido > trigger_valor_11)) || (flanco == 1 && (valor_medido < trigger_valor_09)) ) {
 80019ee:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa0 <ADC_Conversion+0x168>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <ADC_Conversion+0xcc>
 80019f8:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa8 <ADC_Conversion+0x170>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	88fa      	ldrh	r2, [r7, #6]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d80a      	bhi.n	8001a1a <ADC_Conversion+0xe2>
 8001a04:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <ADC_Conversion+0x168>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d10b      	bne.n	8001a26 <ADC_Conversion+0xee>
 8001a0e:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <ADC_Conversion+0x16c>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	88fa      	ldrh	r2, [r7, #6]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d205      	bcs.n	8001a26 <ADC_Conversion+0xee>
	            trigger_activado = 1;
 8001a1a:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <ADC_Conversion+0x178>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
	            trigger_en_condiciones = 0;
 8001a20:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <ADC_Conversion+0x174>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
	        }
	    }

	    puntero_escritura += OFFSET;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <ADC_Conversion+0x15c>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <ADC_Conversion+0x160>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a19      	ldr	r2, [pc, #100]	@ (8001a98 <ADC_Conversion+0x160>)
 8001a34:	6013      	str	r3, [r2, #0]

	    if (puntero_escritura >= posicion_final_puntero_escritura) {
 8001a36:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <ADC_Conversion+0x160>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <ADC_Conversion+0x17c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d31e      	bcc.n	8001a80 <ADC_Conversion+0x148>
	        if (trigger_activado == 1) {
 8001a42:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <ADC_Conversion+0x178>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d117      	bne.n	8001a7c <ADC_Conversion+0x144>
	            if (++trigger_contador >= max_buff_trigger) {
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <ADC_Conversion+0x180>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4a18      	ldr	r2, [pc, #96]	@ (8001ab8 <ADC_Conversion+0x180>)
 8001a58:	4619      	mov	r1, r3
 8001a5a:	8011      	strh	r1, [r2, #0]
 8001a5c:	4a17      	ldr	r2, [pc, #92]	@ (8001abc <ADC_Conversion+0x184>)
 8001a5e:	7812      	ldrb	r2, [r2, #0]
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d30a      	bcc.n	8001a7c <ADC_Conversion+0x144>
	                trigger_contador = 0;
 8001a66:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <ADC_Conversion+0x180>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	801a      	strh	r2, [r3, #0]
	                trigger_activado = 0;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <ADC_Conversion+0x178>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
	                trigger_flag = 1;
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <ADC_Conversion+0x164>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]

	                return 2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e004      	b.n	8001a86 <ADC_Conversion+0x14e>
	            }
	        }
	        return 1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e002      	b.n	8001a86 <ADC_Conversion+0x14e>
	    } else {

	        return -1;
 8001a80:	23ff      	movs	r3, #255	@ 0xff
 8001a82:	e000      	b.n	8001a86 <ADC_Conversion+0x14e>
	    }
	} else {
	    return -1;
 8001a84:	23ff      	movs	r3, #255	@ 0xff
	}

}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000050 	.word	0x20000050
 8001a94:	20000014 	.word	0x20000014
 8001a98:	20000264 	.word	0x20000264
 8001a9c:	20000012 	.word	0x20000012
 8001aa0:	20000272 	.word	0x20000272
 8001aa4:	20000016 	.word	0x20000016
 8001aa8:	20000018 	.word	0x20000018
 8001aac:	20000270 	.word	0x20000270
 8001ab0:	2000026c 	.word	0x2000026c
 8001ab4:	20000268 	.word	0x20000268
 8001ab8:	2000026e 	.word	0x2000026e
 8001abc:	20000013 	.word	0x20000013

08001ac0 <Swap_Buffer>:

void Swap_Buffer(uint8_t swap_condicion){
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
	if(swap_condicion == 0){
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d106      	bne.n	8001ade <Swap_Buffer+0x1e>
		posicion_final_puntero_escritura = bufferPING + TAMANO;
 8001ad0:	4a08      	ldr	r2, [pc, #32]	@ (8001af4 <Swap_Buffer+0x34>)
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <Swap_Buffer+0x38>)
 8001ad4:	601a      	str	r2, [r3, #0]
		puntero_escritura = bufferPING;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <Swap_Buffer+0x3c>)
 8001ad8:	4a09      	ldr	r2, [pc, #36]	@ (8001b00 <Swap_Buffer+0x40>)
 8001ada:	601a      	str	r2, [r3, #0]
	}
	else{
		posicion_final_puntero_escritura = bufferPONG + TAMANO;
		puntero_escritura = bufferPONG;
	}
}
 8001adc:	e005      	b.n	8001aea <Swap_Buffer+0x2a>
		posicion_final_puntero_escritura = bufferPONG + TAMANO;
 8001ade:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <Swap_Buffer+0x44>)
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <Swap_Buffer+0x38>)
 8001ae2:	601a      	str	r2, [r3, #0]
		puntero_escritura = bufferPONG;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <Swap_Buffer+0x3c>)
 8001ae6:	4a08      	ldr	r2, [pc, #32]	@ (8001b08 <Swap_Buffer+0x48>)
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	20000200 	.word	0x20000200
 8001af8:	20000268 	.word	0x20000268
 8001afc:	20000264 	.word	0x20000264
 8001b00:	2000019c 	.word	0x2000019c
 8001b04:	20000264 	.word	0x20000264
 8001b08:	20000200 	.word	0x20000200

08001b0c <UART_TX_PING>:

void UART_TX_PING(){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0


	//HAL_GPIO_WritePin(GPIOA, BUFF_PING_Pin, GPIO_PIN_SET);

	HAL_UART_Transmit(&huart3, bufferPING, sizeof(bufferPING), 10);
 8001b10:	230a      	movs	r3, #10
 8001b12:	2264      	movs	r2, #100	@ 0x64
 8001b14:	4902      	ldr	r1, [pc, #8]	@ (8001b20 <UART_TX_PING+0x14>)
 8001b16:	4803      	ldr	r0, [pc, #12]	@ (8001b24 <UART_TX_PING+0x18>)
 8001b18:	f003 fb0c 	bl	8005134 <HAL_UART_Transmit>

	//HAL_GPIO_WritePin(GPIOA, BUFF_PING_Pin, GPIO_PIN_RESET);
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000019c 	.word	0x2000019c
 8001b24:	20000150 	.word	0x20000150

08001b28 <UART_TX_PONG>:


void UART_TX_PONG(){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0

	//HAL_GPIO_WritePin(GPIOA, BUFF_PONG_Pin, GPIO_PIN_SET);

	HAL_UART_Transmit(&huart3, bufferPONG, sizeof(bufferPONG), 10);
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	2264      	movs	r2, #100	@ 0x64
 8001b30:	4902      	ldr	r1, [pc, #8]	@ (8001b3c <UART_TX_PONG+0x14>)
 8001b32:	4803      	ldr	r0, [pc, #12]	@ (8001b40 <UART_TX_PONG+0x18>)
 8001b34:	f003 fafe 	bl	8005134 <HAL_UART_Transmit>

	//HAL_GPIO_WritePin(GPIOA, BUFF_PONG_Pin, GPIO_PIN_RESET);
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000200 	.word	0x20000200
 8001b40:	20000150 	.word	0x20000150

08001b44 <fsm>:

void fsm(estados_t *estado, eventos_t eventos) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
    estados_t estado_anterior = *estado;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	73fb      	strb	r3, [r7, #15]

    switch (estado_anterior) {
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	2b0d      	cmp	r3, #13
 8001b5a:	f200 80f4 	bhi.w	8001d46 <fsm+0x202>
 8001b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b64 <fsm+0x20>)
 8001b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b64:	08001bd3 	.word	0x08001bd3
 8001b68:	08001c1f 	.word	0x08001c1f
 8001b6c:	08001c4b 	.word	0x08001c4b
 8001b70:	08001c67 	.word	0x08001c67
 8001b74:	08001c83 	.word	0x08001c83
 8001b78:	08001cad 	.word	0x08001cad
 8001b7c:	08001cc9 	.word	0x08001cc9
 8001b80:	08001ce5 	.word	0x08001ce5
 8001b84:	08001d0f 	.word	0x08001d0f
 8001b88:	08001d2b 	.word	0x08001d2b
 8001b8c:	08001b9d 	.word	0x08001b9d
 8001b90:	08001b9d 	.word	0x08001b9d
 8001b94:	08001bf1 	.word	0x08001bf1
 8001b98:	08001c0f 	.word	0x08001c0f
        case GUARDANDO_EN_PING:
        case GUARDANDO_EN_PONG:
            if (eventos == boton_FLECHA) {
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d103      	bne.n	8001baa <fsm+0x66>
                *estado = PAUSA;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	220c      	movs	r2, #12
 8001ba6:	701a      	strb	r2, [r3, #0]
            } else if (eventos == evt_buffer_lleno) {
                *estado = (estado_anterior == GUARDANDO_EN_PING) ? GUARDANDO_EN_PONG : GUARDANDO_EN_PING;
            } else if (eventos == trigger_disparado) {
                *estado = TRIGGER_TERMINADO;
            }
            break;
 8001ba8:	e0cf      	b.n	8001d4a <fsm+0x206>
            } else if (eventos == evt_buffer_lleno) {
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d108      	bne.n	8001bc2 <fsm+0x7e>
                *estado = (estado_anterior == GUARDANDO_EN_PING) ? GUARDANDO_EN_PONG : GUARDANDO_EN_PING;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b0a      	cmp	r3, #10
 8001bb4:	d101      	bne.n	8001bba <fsm+0x76>
 8001bb6:	220b      	movs	r2, #11
 8001bb8:	e000      	b.n	8001bbc <fsm+0x78>
 8001bba:	220a      	movs	r2, #10
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	701a      	strb	r2, [r3, #0]
            break;
 8001bc0:	e0c3      	b.n	8001d4a <fsm+0x206>
            } else if (eventos == trigger_disparado) {
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	f040 80c0 	bne.w	8001d4a <fsm+0x206>
                *estado = TRIGGER_TERMINADO;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	220d      	movs	r2, #13
 8001bce:	701a      	strb	r2, [r3, #0]
            break;
 8001bd0:	e0bb      	b.n	8001d4a <fsm+0x206>
        case INICIO:
            if (eventos == boton_OK) {
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d103      	bne.n	8001be0 <fsm+0x9c>
                *estado = GUARDANDO_EN_PING;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	220a      	movs	r2, #10
 8001bdc:	701a      	strb	r2, [r3, #0]
            } else if (eventos == boton_FLECHA) {
                *estado = C_RESOLUCION;
            }
            break;
 8001bde:	e0b6      	b.n	8001d4e <fsm+0x20a>
            } else if (eventos == boton_FLECHA) {
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	f040 80b3 	bne.w	8001d4e <fsm+0x20a>
                *estado = C_RESOLUCION;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
            break;
 8001bee:	e0ae      	b.n	8001d4e <fsm+0x20a>
        case PAUSA:
            if (eventos == boton_OK) {
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <fsm+0xba>
                *estado = GUARDANDO_EN_PING;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	220a      	movs	r2, #10
 8001bfa:	701a      	strb	r2, [r3, #0]
            } else if (eventos == boton_ESC) {
                *estado = INICIO;
            }
            break;
 8001bfc:	e0a9      	b.n	8001d52 <fsm+0x20e>
            } else if (eventos == boton_ESC) {
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	f040 80a6 	bne.w	8001d52 <fsm+0x20e>
                *estado = INICIO;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
            break;
 8001c0c:	e0a1      	b.n	8001d52 <fsm+0x20e>
        case TRIGGER_TERMINADO:
            if (eventos == boton_ESC) {
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	f040 80a0 	bne.w	8001d56 <fsm+0x212>
                *estado = INICIO;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001c1c:	e09b      	b.n	8001d56 <fsm+0x212>
        case C_RESOLUCION:
            if (eventos == boton_OK) {
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10a      	bne.n	8001c3a <fsm+0xf6>
                *estado = (OFFSET == 1) ? C_RESOLUCION_8bit : C_RESOLUCION_12bit;
 8001c24:	4b91      	ldr	r3, [pc, #580]	@ (8001e6c <fsm+0x328>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <fsm+0xee>
 8001c2e:	2202      	movs	r2, #2
 8001c30:	e000      	b.n	8001c34 <fsm+0xf0>
 8001c32:	2203      	movs	r2, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	701a      	strb	r2, [r3, #0]
            } else if (eventos == boton_FLECHA) {
                *estado = C_TRIGGER;
            }
            break;
 8001c38:	e08f      	b.n	8001d5a <fsm+0x216>
            } else if (eventos == boton_FLECHA) {
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	f040 808c 	bne.w	8001d5a <fsm+0x216>
                *estado = C_TRIGGER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2204      	movs	r2, #4
 8001c46:	701a      	strb	r2, [r3, #0]
            break;
 8001c48:	e087      	b.n	8001d5a <fsm+0x216>
        case C_RESOLUCION_8bit:
            if (eventos == boton_ESC) {
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d103      	bne.n	8001c58 <fsm+0x114>
                *estado = C_RESOLUCION;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
            } else if (eventos == boton_FLECHA) {
                *estado = C_RESOLUCION_12bit;
            }
            break;
 8001c56:	e082      	b.n	8001d5e <fsm+0x21a>
            } else if (eventos == boton_FLECHA) {
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d17f      	bne.n	8001d5e <fsm+0x21a>
                *estado = C_RESOLUCION_12bit;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	701a      	strb	r2, [r3, #0]
            break;
 8001c64:	e07b      	b.n	8001d5e <fsm+0x21a>
        case C_RESOLUCION_12bit:
            if (eventos == boton_ESC) {
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d103      	bne.n	8001c74 <fsm+0x130>
                *estado = C_RESOLUCION;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
            } else if (eventos == boton_FLECHA) {
                *estado = C_RESOLUCION_8bit;
            }
            break;
 8001c72:	e076      	b.n	8001d62 <fsm+0x21e>
            } else if (eventos == boton_FLECHA) {
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d173      	bne.n	8001d62 <fsm+0x21e>
                *estado = C_RESOLUCION_8bit;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	701a      	strb	r2, [r3, #0]
            break;
 8001c80:	e06f      	b.n	8001d62 <fsm+0x21e>
        case C_TRIGGER:
            if (eventos == boton_OK) {
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10a      	bne.n	8001c9e <fsm+0x15a>
                *estado = (flanco == 0) ? C_TRIGGER_ASC : C_TRIGGER_DESC;
 8001c88:	4b79      	ldr	r3, [pc, #484]	@ (8001e70 <fsm+0x32c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <fsm+0x152>
 8001c92:	2205      	movs	r2, #5
 8001c94:	e000      	b.n	8001c98 <fsm+0x154>
 8001c96:	2206      	movs	r2, #6
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	701a      	strb	r2, [r3, #0]
            } else if (eventos == boton_FLECHA) {
                *estado = C_MUESTRAS;
            }
            break;
 8001c9c:	e063      	b.n	8001d66 <fsm+0x222>
            } else if (eventos == boton_FLECHA) {
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d160      	bne.n	8001d66 <fsm+0x222>
                *estado = C_MUESTRAS;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	701a      	strb	r2, [r3, #0]
            break;
 8001caa:	e05c      	b.n	8001d66 <fsm+0x222>
        case C_TRIGGER_ASC:
            if (eventos == boton_ESC) {
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d103      	bne.n	8001cba <fsm+0x176>
                *estado = C_TRIGGER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	701a      	strb	r2, [r3, #0]
            } else if (eventos == boton_FLECHA) {
                *estado = C_TRIGGER_DESC;
            }
            break;
 8001cb8:	e057      	b.n	8001d6a <fsm+0x226>
            } else if (eventos == boton_FLECHA) {
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d154      	bne.n	8001d6a <fsm+0x226>
                *estado = C_TRIGGER_DESC;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2206      	movs	r2, #6
 8001cc4:	701a      	strb	r2, [r3, #0]
            break;
 8001cc6:	e050      	b.n	8001d6a <fsm+0x226>
        case C_TRIGGER_DESC:
            if (eventos == boton_ESC) {
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d103      	bne.n	8001cd6 <fsm+0x192>
                *estado = C_TRIGGER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	701a      	strb	r2, [r3, #0]
            } else if (eventos == boton_FLECHA) {
                *estado = C_TRIGGER_ASC;
            }
            break;
 8001cd4:	e04b      	b.n	8001d6e <fsm+0x22a>
            } else if (eventos == boton_FLECHA) {
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d148      	bne.n	8001d6e <fsm+0x22a>
                *estado = C_TRIGGER_ASC;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2205      	movs	r2, #5
 8001ce0:	701a      	strb	r2, [r3, #0]
            break;
 8001ce2:	e044      	b.n	8001d6e <fsm+0x22a>
        case C_MUESTRAS:
            if (eventos == boton_OK) {
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10a      	bne.n	8001d00 <fsm+0x1bc>
                *estado = (muestras == 0) ? C_MUESTRAS_500 : C_MUESTRAS_1000;
 8001cea:	4b62      	ldr	r3, [pc, #392]	@ (8001e74 <fsm+0x330>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <fsm+0x1b4>
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	e000      	b.n	8001cfa <fsm+0x1b6>
 8001cf8:	2209      	movs	r2, #9
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	701a      	strb	r2, [r3, #0]
            } else if (eventos == boton_FLECHA) {
                *estado = INICIO;
            }
            break;
 8001cfe:	e038      	b.n	8001d72 <fsm+0x22e>
            } else if (eventos == boton_FLECHA) {
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d135      	bne.n	8001d72 <fsm+0x22e>
                *estado = INICIO;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
            break;
 8001d0c:	e031      	b.n	8001d72 <fsm+0x22e>
        case C_MUESTRAS_500:
            if (eventos == boton_ESC) {
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d103      	bne.n	8001d1c <fsm+0x1d8>
                *estado = C_MUESTRAS;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2207      	movs	r2, #7
 8001d18:	701a      	strb	r2, [r3, #0]
            } else if (eventos == boton_FLECHA) {
                *estado = C_MUESTRAS_1000;
            }
            break;
 8001d1a:	e02c      	b.n	8001d76 <fsm+0x232>
            } else if (eventos == boton_FLECHA) {
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d129      	bne.n	8001d76 <fsm+0x232>
                *estado = C_MUESTRAS_1000;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2209      	movs	r2, #9
 8001d26:	701a      	strb	r2, [r3, #0]
            break;
 8001d28:	e025      	b.n	8001d76 <fsm+0x232>
        case C_MUESTRAS_1000:
            if (eventos == boton_ESC) {
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d103      	bne.n	8001d38 <fsm+0x1f4>
                *estado = C_MUESTRAS;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2207      	movs	r2, #7
 8001d34:	701a      	strb	r2, [r3, #0]
            } else if (eventos == boton_FLECHA) {
                *estado = C_MUESTRAS_500;
            }
            break;
 8001d36:	e020      	b.n	8001d7a <fsm+0x236>
            } else if (eventos == boton_FLECHA) {
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d11d      	bne.n	8001d7a <fsm+0x236>
                *estado = C_MUESTRAS_500;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2208      	movs	r2, #8
 8001d42:	701a      	strb	r2, [r3, #0]
            break;
 8001d44:	e019      	b.n	8001d7a <fsm+0x236>
        default:
            break;
 8001d46:	bf00      	nop
 8001d48:	e018      	b.n	8001d7c <fsm+0x238>
            break;
 8001d4a:	bf00      	nop
 8001d4c:	e016      	b.n	8001d7c <fsm+0x238>
            break;
 8001d4e:	bf00      	nop
 8001d50:	e014      	b.n	8001d7c <fsm+0x238>
            break;
 8001d52:	bf00      	nop
 8001d54:	e012      	b.n	8001d7c <fsm+0x238>
            break;
 8001d56:	bf00      	nop
 8001d58:	e010      	b.n	8001d7c <fsm+0x238>
            break;
 8001d5a:	bf00      	nop
 8001d5c:	e00e      	b.n	8001d7c <fsm+0x238>
            break;
 8001d5e:	bf00      	nop
 8001d60:	e00c      	b.n	8001d7c <fsm+0x238>
            break;
 8001d62:	bf00      	nop
 8001d64:	e00a      	b.n	8001d7c <fsm+0x238>
            break;
 8001d66:	bf00      	nop
 8001d68:	e008      	b.n	8001d7c <fsm+0x238>
            break;
 8001d6a:	bf00      	nop
 8001d6c:	e006      	b.n	8001d7c <fsm+0x238>
            break;
 8001d6e:	bf00      	nop
 8001d70:	e004      	b.n	8001d7c <fsm+0x238>
            break;
 8001d72:	bf00      	nop
 8001d74:	e002      	b.n	8001d7c <fsm+0x238>
            break;
 8001d76:	bf00      	nop
 8001d78:	e000      	b.n	8001d7c <fsm+0x238>
            break;
 8001d7a:	bf00      	nop
    }

    if (estado_anterior != *estado) {
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	f000 82e0 	beq.w	8002348 <fsm+0x804>
        switch (estado_anterior) {
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	2b0d      	cmp	r3, #13
 8001d8c:	f200 82cd 	bhi.w	800232a <fsm+0x7e6>
 8001d90:	a201      	add	r2, pc, #4	@ (adr r2, 8001d98 <fsm+0x254>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08001f2f 	.word	0x08001f2f
 8001d9c:	0800200f 	.word	0x0800200f
 8001da0:	0800205d 	.word	0x0800205d
 8001da4:	0800209f 	.word	0x0800209f
 8001da8:	080020e1 	.word	0x080020e1
 8001dac:	08002161 	.word	0x08002161
 8001db0:	080021e1 	.word	0x080021e1
 8001db4:	0800225f 	.word	0x0800225f
 8001db8:	080022ad 	.word	0x080022ad
 8001dbc:	080022ef 	.word	0x080022ef
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001e95 	.word	0x08001e95
 8001dc8:	08001f99 	.word	0x08001f99
 8001dcc:	08001ffd 	.word	0x08001ffd
            case GUARDANDO_EN_PING:
                Swap_Buffer(1);
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f7ff fe75 	bl	8001ac0 <Swap_Buffer>
                UART_TX_PING_flag = 1;
 8001dd6:	4b28      	ldr	r3, [pc, #160]	@ (8001e78 <fsm+0x334>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
                if (*estado == PAUSA || *estado == TRIGGER_TERMINADO) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b0c      	cmp	r3, #12
 8001de2:	d004      	beq.n	8001dee <fsm+0x2aa>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b0d      	cmp	r3, #13
 8001dea:	f040 82a0 	bne.w	800232e <fsm+0x7ea>
                    HAL_TIM_Base_Stop_IT(&htim2);
 8001dee:	4823      	ldr	r0, [pc, #140]	@ (8001e7c <fsm+0x338>)
 8001df0:	f002 fdc6 	bl	8004980 <HAL_TIM_Base_Stop_IT>
                    HAL_ADC_Stop(&hadc1);
 8001df4:	4822      	ldr	r0, [pc, #136]	@ (8001e80 <fsm+0x33c>)
 8001df6:	f000 feaf 	bl	8002b58 <HAL_ADC_Stop>
                    fillRect(20, 80, 100, 15, BLACK);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	230f      	movs	r3, #15
 8001e00:	2264      	movs	r2, #100	@ 0x64
 8001e02:	2150      	movs	r1, #80	@ 0x50
 8001e04:	2014      	movs	r0, #20
 8001e06:	f7fe f9b4 	bl	8000172 <fillRect>
                    if (*estado == PAUSA) {
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d10e      	bne.n	8001e30 <fsm+0x2ec>
                        ST7735_WriteString(40, 80, "Pausado", Font_7x10, RED, BLACK);
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <fsm+0x340>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	9202      	str	r2, [sp, #8]
 8001e18:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e1c:	9201      	str	r2, [sp, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	9200      	str	r2, [sp, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a18      	ldr	r2, [pc, #96]	@ (8001e88 <fsm+0x344>)
 8001e26:	2150      	movs	r1, #80	@ 0x50
 8001e28:	2028      	movs	r0, #40	@ 0x28
 8001e2a:	f7fe ffcd 	bl	8000dc8 <ST7735_WriteString>
                    } else {
                        ST7735_WriteString(40, 80, "Trigger", Font_7x10, color(27, 57, 1), BLACK);
                        ST7735_WriteString(35, 100, "Disparado", Font_7x10, color(27, 57, 1), BLACK);
                    }
                }
                break;
 8001e2e:	e27e      	b.n	800232e <fsm+0x7ea>
                        ST7735_WriteString(40, 80, "Trigger", Font_7x10, color(27, 57, 1), BLACK);
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <fsm+0x340>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	9202      	str	r2, [sp, #8]
 8001e36:	f64d 7221 	movw	r2, #57121	@ 0xdf21
 8001e3a:	9201      	str	r2, [sp, #4]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	9200      	str	r2, [sp, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <fsm+0x348>)
 8001e44:	2150      	movs	r1, #80	@ 0x50
 8001e46:	2028      	movs	r0, #40	@ 0x28
 8001e48:	f7fe ffbe 	bl	8000dc8 <ST7735_WriteString>
                        ST7735_WriteString(35, 100, "Disparado", Font_7x10, color(27, 57, 1), BLACK);
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <fsm+0x340>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	9202      	str	r2, [sp, #8]
 8001e52:	f64d 7221 	movw	r2, #57121	@ 0xdf21
 8001e56:	9201      	str	r2, [sp, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	9200      	str	r2, [sp, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e90 <fsm+0x34c>)
 8001e60:	2164      	movs	r1, #100	@ 0x64
 8001e62:	2023      	movs	r0, #35	@ 0x23
 8001e64:	f7fe ffb0 	bl	8000dc8 <ST7735_WriteString>
                break;
 8001e68:	e261      	b.n	800232e <fsm+0x7ea>
 8001e6a:	bf00      	nop
 8001e6c:	20000014 	.word	0x20000014
 8001e70:	20000272 	.word	0x20000272
 8001e74:	20000273 	.word	0x20000273
 8001e78:	20000198 	.word	0x20000198
 8001e7c:	20000108 	.word	0x20000108
 8001e80:	20000050 	.word	0x20000050
 8001e84:	20000000 	.word	0x20000000
 8001e88:	08005644 	.word	0x08005644
 8001e8c:	08005590 	.word	0x08005590
 8001e90:	0800564c 	.word	0x0800564c
            case GUARDANDO_EN_PONG:
                Swap_Buffer(0);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff fe13 	bl	8001ac0 <Swap_Buffer>
                UART_TX_PONG_flag = 1;
 8001e9a:	4ba4      	ldr	r3, [pc, #656]	@ (800212c <fsm+0x5e8>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
                if (*estado == PAUSA || *estado == TRIGGER_TERMINADO) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d004      	beq.n	8001eb2 <fsm+0x36e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b0d      	cmp	r3, #13
 8001eae:	f040 8240 	bne.w	8002332 <fsm+0x7ee>
                    HAL_TIM_Base_Stop_IT(&htim2);
 8001eb2:	489f      	ldr	r0, [pc, #636]	@ (8002130 <fsm+0x5ec>)
 8001eb4:	f002 fd64 	bl	8004980 <HAL_TIM_Base_Stop_IT>
                    HAL_ADC_Stop(&hadc1);
 8001eb8:	489e      	ldr	r0, [pc, #632]	@ (8002134 <fsm+0x5f0>)
 8001eba:	f000 fe4d 	bl	8002b58 <HAL_ADC_Stop>
                    fillRect(20, 80, 100, 15, BLACK);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	2264      	movs	r2, #100	@ 0x64
 8001ec6:	2150      	movs	r1, #80	@ 0x50
 8001ec8:	2014      	movs	r0, #20
 8001eca:	f7fe f952 	bl	8000172 <fillRect>
                    if (*estado == PAUSA) {
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d10e      	bne.n	8001ef4 <fsm+0x3b0>
                        ST7735_WriteString(40, 80, "Pausado", Font_7x10, RED, BLACK);
 8001ed6:	4b98      	ldr	r3, [pc, #608]	@ (8002138 <fsm+0x5f4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	9202      	str	r2, [sp, #8]
 8001edc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001ee0:	9201      	str	r2, [sp, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	9200      	str	r2, [sp, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a94      	ldr	r2, [pc, #592]	@ (800213c <fsm+0x5f8>)
 8001eea:	2150      	movs	r1, #80	@ 0x50
 8001eec:	2028      	movs	r0, #40	@ 0x28
 8001eee:	f7fe ff6b 	bl	8000dc8 <ST7735_WriteString>
                    } else {
                        ST7735_WriteString(40, 80, "Trigger", Font_7x10, color(27, 57, 1), BLACK);
                        ST7735_WriteString(35, 100, "Disparado", Font_7x10, color(27, 57, 1), BLACK);
                    }
                }
                break;
 8001ef2:	e21e      	b.n	8002332 <fsm+0x7ee>
                        ST7735_WriteString(40, 80, "Trigger", Font_7x10, color(27, 57, 1), BLACK);
 8001ef4:	4b90      	ldr	r3, [pc, #576]	@ (8002138 <fsm+0x5f4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	9202      	str	r2, [sp, #8]
 8001efa:	f64d 7221 	movw	r2, #57121	@ 0xdf21
 8001efe:	9201      	str	r2, [sp, #4]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	9200      	str	r2, [sp, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a8e      	ldr	r2, [pc, #568]	@ (8002140 <fsm+0x5fc>)
 8001f08:	2150      	movs	r1, #80	@ 0x50
 8001f0a:	2028      	movs	r0, #40	@ 0x28
 8001f0c:	f7fe ff5c 	bl	8000dc8 <ST7735_WriteString>
                        ST7735_WriteString(35, 100, "Disparado", Font_7x10, color(27, 57, 1), BLACK);
 8001f10:	4b89      	ldr	r3, [pc, #548]	@ (8002138 <fsm+0x5f4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	9202      	str	r2, [sp, #8]
 8001f16:	f64d 7221 	movw	r2, #57121	@ 0xdf21
 8001f1a:	9201      	str	r2, [sp, #4]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	9200      	str	r2, [sp, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a88      	ldr	r2, [pc, #544]	@ (8002144 <fsm+0x600>)
 8001f24:	2164      	movs	r1, #100	@ 0x64
 8001f26:	2023      	movs	r0, #35	@ 0x23
 8001f28:	f7fe ff4e 	bl	8000dc8 <ST7735_WriteString>
                break;
 8001f2c:	e201      	b.n	8002332 <fsm+0x7ee>
            case INICIO:
                if (*estado == GUARDANDO_EN_PING) {
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b0a      	cmp	r3, #10
 8001f34:	d123      	bne.n	8001f7e <fsm+0x43a>
                    plotInicio();
 8001f36:	f7ff fb55 	bl	80015e4 <plotInicio>
                    max_buff_trigger = (OFFSET == 1) ? ((muestras == 0) ? 6 : 11) : ((muestras == 0) ? 11 : 220);
 8001f3a:	4b83      	ldr	r3, [pc, #524]	@ (8002148 <fsm+0x604>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d108      	bne.n	8001f56 <fsm+0x412>
 8001f44:	4b81      	ldr	r3, [pc, #516]	@ (800214c <fsm+0x608>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <fsm+0x40e>
 8001f4e:	2306      	movs	r3, #6
 8001f50:	e009      	b.n	8001f66 <fsm+0x422>
 8001f52:	230b      	movs	r3, #11
 8001f54:	e007      	b.n	8001f66 <fsm+0x422>
 8001f56:	4b7d      	ldr	r3, [pc, #500]	@ (800214c <fsm+0x608>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <fsm+0x420>
 8001f60:	230b      	movs	r3, #11
 8001f62:	e000      	b.n	8001f66 <fsm+0x422>
 8001f64:	23dc      	movs	r3, #220	@ 0xdc
 8001f66:	4a7a      	ldr	r2, [pc, #488]	@ (8002150 <fsm+0x60c>)
 8001f68:	7013      	strb	r3, [r2, #0]
                    Swap_Buffer(0);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7ff fda8 	bl	8001ac0 <Swap_Buffer>
                    HAL_TIM_Base_Start_IT(&htim2);
 8001f70:	486f      	ldr	r0, [pc, #444]	@ (8002130 <fsm+0x5ec>)
 8001f72:	f002 fcb3 	bl	80048dc <HAL_TIM_Base_Start_IT>
                    HAL_ADC_Start(&hadc1);
 8001f76:	486f      	ldr	r0, [pc, #444]	@ (8002134 <fsm+0x5f0>)
 8001f78:	f000 fd40 	bl	80029fc <HAL_ADC_Start>
                } else {
                    fillCircle(21, 75, 5, BLACK);
                    fillCircle(21, 94, 5, BLUE);
                }
                break;
 8001f7c:	e1e4      	b.n	8002348 <fsm+0x804>
                    fillCircle(21, 75, 5, BLACK);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2205      	movs	r2, #5
 8001f82:	214b      	movs	r1, #75	@ 0x4b
 8001f84:	2015      	movs	r0, #21
 8001f86:	f7fe fbb3 	bl	80006f0 <fillCircle>
                    fillCircle(21, 94, 5, BLUE);
 8001f8a:	231f      	movs	r3, #31
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	215e      	movs	r1, #94	@ 0x5e
 8001f90:	2015      	movs	r0, #21
 8001f92:	f7fe fbad 	bl	80006f0 <fillCircle>
                break;
 8001f96:	e1d7      	b.n	8002348 <fsm+0x804>
            case PAUSA:
                if (*estado == GUARDANDO_EN_PING) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b0a      	cmp	r3, #10
 8001f9e:	d11f      	bne.n	8001fe0 <fsm+0x49c>
                    fillRect(20, 80, 100, 15, BLACK);
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	2264      	movs	r2, #100	@ 0x64
 8001fa8:	2150      	movs	r1, #80	@ 0x50
 8001faa:	2014      	movs	r0, #20
 8001fac:	f7fe f8e1 	bl	8000172 <fillRect>
                    ST7735_WriteString(20, 80, "Transmitiendo", Font_7x10, GREEN, BLACK);
 8001fb0:	4b61      	ldr	r3, [pc, #388]	@ (8002138 <fsm+0x5f4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	9202      	str	r2, [sp, #8]
 8001fb6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001fba:	9201      	str	r2, [sp, #4]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	9200      	str	r2, [sp, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a64      	ldr	r2, [pc, #400]	@ (8002154 <fsm+0x610>)
 8001fc4:	2150      	movs	r1, #80	@ 0x50
 8001fc6:	2014      	movs	r0, #20
 8001fc8:	f7fe fefe 	bl	8000dc8 <ST7735_WriteString>
                    Swap_Buffer(0);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff fd77 	bl	8001ac0 <Swap_Buffer>
                    HAL_TIM_Base_Start_IT(&htim2);
 8001fd2:	4857      	ldr	r0, [pc, #348]	@ (8002130 <fsm+0x5ec>)
 8001fd4:	f002 fc82 	bl	80048dc <HAL_TIM_Base_Start_IT>
                    HAL_ADC_Start(&hadc1);
 8001fd8:	4856      	ldr	r0, [pc, #344]	@ (8002134 <fsm+0x5f0>)
 8001fda:	f000 fd0f 	bl	80029fc <HAL_ADC_Start>
                } else if (*estado == INICIO) {
                    plotConfig();
                    fillCircle(21, 75, 5, BLUE);
                }
                break;
 8001fde:	e1aa      	b.n	8002336 <fsm+0x7f2>
                } else if (*estado == INICIO) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 81a6 	bne.w	8002336 <fsm+0x7f2>
                    plotConfig();
 8001fea:	f7ff fa85 	bl	80014f8 <plotConfig>
                    fillCircle(21, 75, 5, BLUE);
 8001fee:	231f      	movs	r3, #31
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	214b      	movs	r1, #75	@ 0x4b
 8001ff4:	2015      	movs	r0, #21
 8001ff6:	f7fe fb7b 	bl	80006f0 <fillCircle>
                break;
 8001ffa:	e19c      	b.n	8002336 <fsm+0x7f2>
            case TRIGGER_TERMINADO:

                plotConfig();
 8001ffc:	f7ff fa7c 	bl	80014f8 <plotConfig>
                fillCircle(21, 75, 5, BLUE);
 8002000:	231f      	movs	r3, #31
 8002002:	2205      	movs	r2, #5
 8002004:	214b      	movs	r1, #75	@ 0x4b
 8002006:	2015      	movs	r0, #21
 8002008:	f7fe fb72 	bl	80006f0 <fillCircle>
                break;
 800200c:	e19c      	b.n	8002348 <fsm+0x804>
            case C_RESOLUCION:
                if (*estado == C_TRIGGER) {
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b04      	cmp	r3, #4
 8002014:	d10c      	bne.n	8002030 <fsm+0x4ec>
                    fillCircle(21, 94, 5, BLACK);
 8002016:	2300      	movs	r3, #0
 8002018:	2205      	movs	r2, #5
 800201a:	215e      	movs	r1, #94	@ 0x5e
 800201c:	2015      	movs	r0, #21
 800201e:	f7fe fb67 	bl	80006f0 <fillCircle>
                    fillCircle(21, 115, 5, BLUE);
 8002022:	231f      	movs	r3, #31
 8002024:	2205      	movs	r2, #5
 8002026:	2173      	movs	r1, #115	@ 0x73
 8002028:	2015      	movs	r0, #21
 800202a:	f7fe fb61 	bl	80006f0 <fillCircle>
                    fillCircle(35, 74, 5, BLUE);
                } else {
                    plotResolucion();
                    fillCircle(35, 94, 5, BLUE);
                }
                break;
 800202e:	e18b      	b.n	8002348 <fsm+0x804>
                } else if (*estado == C_RESOLUCION_8bit) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d108      	bne.n	800204a <fsm+0x506>
                    plotResolucion();
 8002038:	f7ff fb0c 	bl	8001654 <plotResolucion>
                    fillCircle(35, 74, 5, BLUE);
 800203c:	231f      	movs	r3, #31
 800203e:	2205      	movs	r2, #5
 8002040:	214a      	movs	r1, #74	@ 0x4a
 8002042:	2023      	movs	r0, #35	@ 0x23
 8002044:	f7fe fb54 	bl	80006f0 <fillCircle>
                break;
 8002048:	e17e      	b.n	8002348 <fsm+0x804>
                    plotResolucion();
 800204a:	f7ff fb03 	bl	8001654 <plotResolucion>
                    fillCircle(35, 94, 5, BLUE);
 800204e:	231f      	movs	r3, #31
 8002050:	2205      	movs	r2, #5
 8002052:	215e      	movs	r1, #94	@ 0x5e
 8002054:	2023      	movs	r0, #35	@ 0x23
 8002056:	f7fe fb4b 	bl	80006f0 <fillCircle>
                break;
 800205a:	e175      	b.n	8002348 <fsm+0x804>
            case C_RESOLUCION_8bit:
                if (*estado == C_RESOLUCION_12bit) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d113      	bne.n	800208c <fsm+0x548>
                    OFFSET = 2;
 8002064:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <fsm+0x604>)
 8002066:	2202      	movs	r2, #2
 8002068:	701a      	strb	r2, [r3, #0]
                    //htim2.Init.Period = 30-1;

                    TIM2->ARR = 29-1;
 800206a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800206e:	221c      	movs	r2, #28
 8002070:	62da      	str	r2, [r3, #44]	@ 0x2c


                    fillCircle(35, 74, 5, BLACK);
 8002072:	2300      	movs	r3, #0
 8002074:	2205      	movs	r2, #5
 8002076:	214a      	movs	r1, #74	@ 0x4a
 8002078:	2023      	movs	r0, #35	@ 0x23
 800207a:	f7fe fb39 	bl	80006f0 <fillCircle>
                    fillCircle(35, 94, 5, BLUE);
 800207e:	231f      	movs	r3, #31
 8002080:	2205      	movs	r2, #5
 8002082:	215e      	movs	r1, #94	@ 0x5e
 8002084:	2023      	movs	r0, #35	@ 0x23
 8002086:	f7fe fb33 	bl	80006f0 <fillCircle>
                } else {
                    plotConfig();
                    fillCircle(21, 94, 5, BLUE);
                }
                break;
 800208a:	e15d      	b.n	8002348 <fsm+0x804>
                    plotConfig();
 800208c:	f7ff fa34 	bl	80014f8 <plotConfig>
                    fillCircle(21, 94, 5, BLUE);
 8002090:	231f      	movs	r3, #31
 8002092:	2205      	movs	r2, #5
 8002094:	215e      	movs	r1, #94	@ 0x5e
 8002096:	2015      	movs	r0, #21
 8002098:	f7fe fb2a 	bl	80006f0 <fillCircle>
                break;
 800209c:	e154      	b.n	8002348 <fsm+0x804>
            case C_RESOLUCION_12bit:
                if (*estado == C_RESOLUCION_8bit) {
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d113      	bne.n	80020ce <fsm+0x58a>
                    OFFSET = 1;
 80020a6:	4b28      	ldr	r3, [pc, #160]	@ (8002148 <fsm+0x604>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]

                    TIM2->ARR = 17-1;
 80020ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020b0:	2210      	movs	r2, #16
 80020b2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    fillCircle(35, 94, 5, BLACK);
 80020b4:	2300      	movs	r3, #0
 80020b6:	2205      	movs	r2, #5
 80020b8:	215e      	movs	r1, #94	@ 0x5e
 80020ba:	2023      	movs	r0, #35	@ 0x23
 80020bc:	f7fe fb18 	bl	80006f0 <fillCircle>
                    fillCircle(35, 74, 5, BLUE);
 80020c0:	231f      	movs	r3, #31
 80020c2:	2205      	movs	r2, #5
 80020c4:	214a      	movs	r1, #74	@ 0x4a
 80020c6:	2023      	movs	r0, #35	@ 0x23
 80020c8:	f7fe fb12 	bl	80006f0 <fillCircle>
                } else {
                    plotConfig();
                    fillCircle(21, 94, 5, BLUE);
                }
                break;
 80020cc:	e13c      	b.n	8002348 <fsm+0x804>
                    plotConfig();
 80020ce:	f7ff fa13 	bl	80014f8 <plotConfig>
                    fillCircle(21, 94, 5, BLUE);
 80020d2:	231f      	movs	r3, #31
 80020d4:	2205      	movs	r2, #5
 80020d6:	215e      	movs	r1, #94	@ 0x5e
 80020d8:	2015      	movs	r0, #21
 80020da:	f7fe fb09 	bl	80006f0 <fillCircle>
                break;
 80020de:	e133      	b.n	8002348 <fsm+0x804>
            case C_TRIGGER:
                if (*estado == C_MUESTRAS) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b07      	cmp	r3, #7
 80020e6:	d10c      	bne.n	8002102 <fsm+0x5be>
                    fillCircle(21, 115, 5, BLACK);
 80020e8:	2300      	movs	r3, #0
 80020ea:	2205      	movs	r2, #5
 80020ec:	2173      	movs	r1, #115	@ 0x73
 80020ee:	2015      	movs	r0, #21
 80020f0:	f7fe fafe 	bl	80006f0 <fillCircle>
                    fillCircle(21, 134, 5, BLUE);
 80020f4:	231f      	movs	r3, #31
 80020f6:	2205      	movs	r2, #5
 80020f8:	2186      	movs	r1, #134	@ 0x86
 80020fa:	2015      	movs	r0, #21
 80020fc:	f7fe faf8 	bl	80006f0 <fillCircle>
                    ADC_TRIGGER_flag = 1;
                    HAL_ADC_Start(&hadc2);
                    plotTrigger();
                    fillCircle(23, (*estado == C_TRIGGER_ASC) ? 105 : 123, 5, BLUE);
                }
                break;
 8002100:	e122      	b.n	8002348 <fsm+0x804>
                    ADC_TRIGGER_flag = 1;
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <fsm+0x614>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
                    HAL_ADC_Start(&hadc2);
 8002108:	4814      	ldr	r0, [pc, #80]	@ (800215c <fsm+0x618>)
 800210a:	f000 fc77 	bl	80029fc <HAL_ADC_Start>
                    plotTrigger();
 800210e:	f7ff faf7 	bl	8001700 <plotTrigger>
                    fillCircle(23, (*estado == C_TRIGGER_ASC) ? 105 : 123, 5, BLUE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d101      	bne.n	800211e <fsm+0x5da>
 800211a:	2169      	movs	r1, #105	@ 0x69
 800211c:	e000      	b.n	8002120 <fsm+0x5dc>
 800211e:	217b      	movs	r1, #123	@ 0x7b
 8002120:	231f      	movs	r3, #31
 8002122:	2205      	movs	r2, #5
 8002124:	2017      	movs	r0, #23
 8002126:	f7fe fae3 	bl	80006f0 <fillCircle>
                break;
 800212a:	e10d      	b.n	8002348 <fsm+0x804>
 800212c:	20000199 	.word	0x20000199
 8002130:	20000108 	.word	0x20000108
 8002134:	20000050 	.word	0x20000050
 8002138:	20000000 	.word	0x20000000
 800213c:	08005644 	.word	0x08005644
 8002140:	08005590 	.word	0x08005590
 8002144:	0800564c 	.word	0x0800564c
 8002148:	20000014 	.word	0x20000014
 800214c:	20000273 	.word	0x20000273
 8002150:	20000013 	.word	0x20000013
 8002154:	080055ac 	.word	0x080055ac
 8002158:	20000271 	.word	0x20000271
 800215c:	20000080 	.word	0x20000080
            case C_TRIGGER_ASC:
                if (*estado == C_TRIGGER) {
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d126      	bne.n	80021b6 <fsm+0x672>

                	ADC_TRIGGER_flag = 0;
 8002168:	4b79      	ldr	r3, [pc, #484]	@ (8002350 <fsm+0x80c>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
    				trigger_valor_09 = trigger_valor - (trigger_valor>>3);
 800216e:	4b79      	ldr	r3, [pc, #484]	@ (8002354 <fsm+0x810>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b77      	ldr	r3, [pc, #476]	@ (8002354 <fsm+0x810>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	b29b      	uxth	r3, r3
 800217a:	08db      	lsrs	r3, r3, #3
 800217c:	b29b      	uxth	r3, r3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b75      	ldr	r3, [pc, #468]	@ (8002358 <fsm+0x814>)
 8002184:	801a      	strh	r2, [r3, #0]
    				trigger_valor_11 = trigger_valor + (trigger_valor>>3);
 8002186:	4b73      	ldr	r3, [pc, #460]	@ (8002354 <fsm+0x810>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	08db      	lsrs	r3, r3, #3
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b70      	ldr	r3, [pc, #448]	@ (8002354 <fsm+0x810>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	4413      	add	r3, r2
 8002198:	b29a      	uxth	r2, r3
 800219a:	4b70      	ldr	r3, [pc, #448]	@ (800235c <fsm+0x818>)
 800219c:	801a      	strh	r2, [r3, #0]

                    HAL_ADC_Stop(&hadc2);
 800219e:	4870      	ldr	r0, [pc, #448]	@ (8002360 <fsm+0x81c>)
 80021a0:	f000 fcda 	bl	8002b58 <HAL_ADC_Stop>
                    plotConfig();
 80021a4:	f7ff f9a8 	bl	80014f8 <plotConfig>
                    fillCircle(21, 115, 5, BLUE);
 80021a8:	231f      	movs	r3, #31
 80021aa:	2205      	movs	r2, #5
 80021ac:	2173      	movs	r1, #115	@ 0x73
 80021ae:	2015      	movs	r0, #21
 80021b0:	f7fe fa9e 	bl	80006f0 <fillCircle>
                } else if (*estado == C_TRIGGER_DESC) {
                    flanco = 1;
                    fillCircle(23, 105, 5, BLACK);
                    fillCircle(23, 123, 5, BLUE);
                }
                break;
 80021b4:	e0c1      	b.n	800233a <fsm+0x7f6>
                } else if (*estado == C_TRIGGER_DESC) {
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	f040 80bd 	bne.w	800233a <fsm+0x7f6>
                    flanco = 1;
 80021c0:	4b68      	ldr	r3, [pc, #416]	@ (8002364 <fsm+0x820>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
                    fillCircle(23, 105, 5, BLACK);
 80021c6:	2300      	movs	r3, #0
 80021c8:	2205      	movs	r2, #5
 80021ca:	2169      	movs	r1, #105	@ 0x69
 80021cc:	2017      	movs	r0, #23
 80021ce:	f7fe fa8f 	bl	80006f0 <fillCircle>
                    fillCircle(23, 123, 5, BLUE);
 80021d2:	231f      	movs	r3, #31
 80021d4:	2205      	movs	r2, #5
 80021d6:	217b      	movs	r1, #123	@ 0x7b
 80021d8:	2017      	movs	r0, #23
 80021da:	f7fe fa89 	bl	80006f0 <fillCircle>
                break;
 80021de:	e0ac      	b.n	800233a <fsm+0x7f6>
            case C_TRIGGER_DESC:
                if (*estado == C_TRIGGER) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d126      	bne.n	8002236 <fsm+0x6f2>

                	ADC_TRIGGER_flag = 0;
 80021e8:	4b59      	ldr	r3, [pc, #356]	@ (8002350 <fsm+0x80c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
    				trigger_valor_09 = trigger_valor - (trigger_valor>>3);
 80021ee:	4b59      	ldr	r3, [pc, #356]	@ (8002354 <fsm+0x810>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b57      	ldr	r3, [pc, #348]	@ (8002354 <fsm+0x810>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	08db      	lsrs	r3, r3, #3
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b55      	ldr	r3, [pc, #340]	@ (8002358 <fsm+0x814>)
 8002204:	801a      	strh	r2, [r3, #0]
    				trigger_valor_11 = trigger_valor + (trigger_valor>>3);
 8002206:	4b53      	ldr	r3, [pc, #332]	@ (8002354 <fsm+0x810>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	b29a      	uxth	r2, r3
 8002210:	4b50      	ldr	r3, [pc, #320]	@ (8002354 <fsm+0x810>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	4413      	add	r3, r2
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b50      	ldr	r3, [pc, #320]	@ (800235c <fsm+0x818>)
 800221c:	801a      	strh	r2, [r3, #0]

                    HAL_ADC_Stop(&hadc2);
 800221e:	4850      	ldr	r0, [pc, #320]	@ (8002360 <fsm+0x81c>)
 8002220:	f000 fc9a 	bl	8002b58 <HAL_ADC_Stop>
                    plotConfig();
 8002224:	f7ff f968 	bl	80014f8 <plotConfig>
                    fillCircle(21, 115, 5, BLUE);
 8002228:	231f      	movs	r3, #31
 800222a:	2205      	movs	r2, #5
 800222c:	2173      	movs	r1, #115	@ 0x73
 800222e:	2015      	movs	r0, #21
 8002230:	f7fe fa5e 	bl	80006f0 <fillCircle>
                } else if (*estado == C_TRIGGER_ASC) {
                    flanco = 0;
                    fillCircle(23, 105, 5, BLUE);
                    fillCircle(23, 123, 5, BLACK);
                }
                break;
 8002234:	e083      	b.n	800233e <fsm+0x7fa>
                } else if (*estado == C_TRIGGER_ASC) {
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b05      	cmp	r3, #5
 800223c:	d17f      	bne.n	800233e <fsm+0x7fa>
                    flanco = 0;
 800223e:	4b49      	ldr	r3, [pc, #292]	@ (8002364 <fsm+0x820>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
                    fillCircle(23, 105, 5, BLUE);
 8002244:	231f      	movs	r3, #31
 8002246:	2205      	movs	r2, #5
 8002248:	2169      	movs	r1, #105	@ 0x69
 800224a:	2017      	movs	r0, #23
 800224c:	f7fe fa50 	bl	80006f0 <fillCircle>
                    fillCircle(23, 123, 5, BLACK);
 8002250:	2300      	movs	r3, #0
 8002252:	2205      	movs	r2, #5
 8002254:	217b      	movs	r1, #123	@ 0x7b
 8002256:	2017      	movs	r0, #23
 8002258:	f7fe fa4a 	bl	80006f0 <fillCircle>
                break;
 800225c:	e06f      	b.n	800233e <fsm+0x7fa>
            case C_MUESTRAS:
                if (*estado == INICIO) {
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <fsm+0x73c>
                    fillCircle(21, 134, 5, BLACK);
 8002266:	2300      	movs	r3, #0
 8002268:	2205      	movs	r2, #5
 800226a:	2186      	movs	r1, #134	@ 0x86
 800226c:	2015      	movs	r0, #21
 800226e:	f7fe fa3f 	bl	80006f0 <fillCircle>
                    fillCircle(21, 75, 5, BLUE);
 8002272:	231f      	movs	r3, #31
 8002274:	2205      	movs	r2, #5
 8002276:	214b      	movs	r1, #75	@ 0x4b
 8002278:	2015      	movs	r0, #21
 800227a:	f7fe fa39 	bl	80006f0 <fillCircle>
                    fillCircle(21, 84, 5, BLUE);
                } else {
                    plotMuestras();
                    fillCircle(21, 104, 5, BLUE);
                }
                break;
 800227e:	e063      	b.n	8002348 <fsm+0x804>
                } else if (*estado == C_MUESTRAS_500) {
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d108      	bne.n	800229a <fsm+0x756>
                    plotMuestras();
 8002288:	f7ff fa90 	bl	80017ac <plotMuestras>
                    fillCircle(21, 84, 5, BLUE);
 800228c:	231f      	movs	r3, #31
 800228e:	2205      	movs	r2, #5
 8002290:	2154      	movs	r1, #84	@ 0x54
 8002292:	2015      	movs	r0, #21
 8002294:	f7fe fa2c 	bl	80006f0 <fillCircle>
                break;
 8002298:	e056      	b.n	8002348 <fsm+0x804>
                    plotMuestras();
 800229a:	f7ff fa87 	bl	80017ac <plotMuestras>
                    fillCircle(21, 104, 5, BLUE);
 800229e:	231f      	movs	r3, #31
 80022a0:	2205      	movs	r2, #5
 80022a2:	2168      	movs	r1, #104	@ 0x68
 80022a4:	2015      	movs	r0, #21
 80022a6:	f7fe fa23 	bl	80006f0 <fillCircle>
                break;
 80022aa:	e04d      	b.n	8002348 <fsm+0x804>
            case C_MUESTRAS_500:
                if (*estado == C_MUESTRAS) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b07      	cmp	r3, #7
 80022b2:	d108      	bne.n	80022c6 <fsm+0x782>
                    plotConfig();
 80022b4:	f7ff f920 	bl	80014f8 <plotConfig>
                    fillCircle(21, 134, 5, BLUE);
 80022b8:	231f      	movs	r3, #31
 80022ba:	2205      	movs	r2, #5
 80022bc:	2186      	movs	r1, #134	@ 0x86
 80022be:	2015      	movs	r0, #21
 80022c0:	f7fe fa16 	bl	80006f0 <fillCircle>
                } else if (*estado == C_MUESTRAS_1000) {
                    muestras = 1;
                    fillCircle(21, 84, 5, BLACK);
                    fillCircle(21, 104, 5, BLUE);
                }
                break;
 80022c4:	e03d      	b.n	8002342 <fsm+0x7fe>
                } else if (*estado == C_MUESTRAS_1000) {
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	d139      	bne.n	8002342 <fsm+0x7fe>
                    muestras = 1;
 80022ce:	4b26      	ldr	r3, [pc, #152]	@ (8002368 <fsm+0x824>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
                    fillCircle(21, 84, 5, BLACK);
 80022d4:	2300      	movs	r3, #0
 80022d6:	2205      	movs	r2, #5
 80022d8:	2154      	movs	r1, #84	@ 0x54
 80022da:	2015      	movs	r0, #21
 80022dc:	f7fe fa08 	bl	80006f0 <fillCircle>
                    fillCircle(21, 104, 5, BLUE);
 80022e0:	231f      	movs	r3, #31
 80022e2:	2205      	movs	r2, #5
 80022e4:	2168      	movs	r1, #104	@ 0x68
 80022e6:	2015      	movs	r0, #21
 80022e8:	f7fe fa02 	bl	80006f0 <fillCircle>
                break;
 80022ec:	e029      	b.n	8002342 <fsm+0x7fe>
            case C_MUESTRAS_1000:
                if (*estado == C_MUESTRAS) {
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b07      	cmp	r3, #7
 80022f4:	d108      	bne.n	8002308 <fsm+0x7c4>
                    plotConfig();
 80022f6:	f7ff f8ff 	bl	80014f8 <plotConfig>
                    fillCircle(21, 134, 5, BLUE);
 80022fa:	231f      	movs	r3, #31
 80022fc:	2205      	movs	r2, #5
 80022fe:	2186      	movs	r1, #134	@ 0x86
 8002300:	2015      	movs	r0, #21
 8002302:	f7fe f9f5 	bl	80006f0 <fillCircle>
                } else if (*estado == C_MUESTRAS_500) {
                    fillCircle(21, 84, 5, BLUE);
                    fillCircle(21, 104, 5, BLACK);
                }
                break;
 8002306:	e01e      	b.n	8002346 <fsm+0x802>
                } else if (*estado == C_MUESTRAS_500) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d11a      	bne.n	8002346 <fsm+0x802>
                    fillCircle(21, 84, 5, BLUE);
 8002310:	231f      	movs	r3, #31
 8002312:	2205      	movs	r2, #5
 8002314:	2154      	movs	r1, #84	@ 0x54
 8002316:	2015      	movs	r0, #21
 8002318:	f7fe f9ea 	bl	80006f0 <fillCircle>
                    fillCircle(21, 104, 5, BLACK);
 800231c:	2300      	movs	r3, #0
 800231e:	2205      	movs	r2, #5
 8002320:	2168      	movs	r1, #104	@ 0x68
 8002322:	2015      	movs	r0, #21
 8002324:	f7fe f9e4 	bl	80006f0 <fillCircle>
                break;
 8002328:	e00d      	b.n	8002346 <fsm+0x802>
            default:
                break;
 800232a:	bf00      	nop
 800232c:	e00c      	b.n	8002348 <fsm+0x804>
                break;
 800232e:	bf00      	nop
 8002330:	e00a      	b.n	8002348 <fsm+0x804>
                break;
 8002332:	bf00      	nop
 8002334:	e008      	b.n	8002348 <fsm+0x804>
                break;
 8002336:	bf00      	nop
 8002338:	e006      	b.n	8002348 <fsm+0x804>
                break;
 800233a:	bf00      	nop
 800233c:	e004      	b.n	8002348 <fsm+0x804>
                break;
 800233e:	bf00      	nop
 8002340:	e002      	b.n	8002348 <fsm+0x804>
                break;
 8002342:	bf00      	nop
 8002344:	e000      	b.n	8002348 <fsm+0x804>
                break;
 8002346:	bf00      	nop
        }
    }
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000271 	.word	0x20000271
 8002354:	20000010 	.word	0x20000010
 8002358:	20000016 	.word	0x20000016
 800235c:	20000018 	.word	0x20000018
 8002360:	20000080 	.word	0x20000080
 8002364:	20000272 	.word	0x20000272
 8002368:	20000273 	.word	0x20000273

0800236c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002370:	b672      	cpsid	i
}
 8002372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <Error_Handler+0x8>

08002378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_MspInit+0x5c>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	4a14      	ldr	r2, [pc, #80]	@ (80023d4 <HAL_MspInit+0x5c>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6193      	str	r3, [r2, #24]
 800238a:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <HAL_MspInit+0x5c>)
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <HAL_MspInit+0x5c>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a0e      	ldr	r2, [pc, #56]	@ (80023d4 <HAL_MspInit+0x5c>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <HAL_MspInit+0x5c>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_MspInit+0x60>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <HAL_MspInit+0x60>)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010000 	.word	0x40010000

080023dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	@ 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0318 	add.w	r3, r7, #24
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a30      	ldr	r2, [pc, #192]	@ (80024b8 <HAL_ADC_MspInit+0xdc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d12a      	bne.n	8002452 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023fc:	4b2f      	ldr	r3, [pc, #188]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a2e      	ldr	r2, [pc, #184]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 8002402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002406:	6193      	str	r3, [r2, #24]
 8002408:	4b2c      	ldr	r3, [pc, #176]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002414:	4b29      	ldr	r3, [pc, #164]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4a28      	ldr	r2, [pc, #160]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	6193      	str	r3, [r2, #24]
 8002420:	4b26      	ldr	r3, [pc, #152]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800242c:	2301      	movs	r3, #1
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002430:	2303      	movs	r3, #3
 8002432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 0318 	add.w	r3, r7, #24
 8002438:	4619      	mov	r1, r3
 800243a:	4821      	ldr	r0, [pc, #132]	@ (80024c0 <HAL_ADC_MspInit+0xe4>)
 800243c:	f001 f846 	bl	80034cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	2012      	movs	r0, #18
 8002446:	f001 f80a 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800244a:	2012      	movs	r0, #18
 800244c:	f001 f823 	bl	8003496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002450:	e02e      	b.n	80024b0 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1b      	ldr	r2, [pc, #108]	@ (80024c4 <HAL_ADC_MspInit+0xe8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d129      	bne.n	80024b0 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800245c:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	4a16      	ldr	r2, [pc, #88]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 8002462:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002466:	6193      	str	r3, [r2, #24]
 8002468:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a10      	ldr	r2, [pc, #64]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <HAL_ADC_MspInit+0xe0>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_TRIGGER_Pin;
 800248c:	2304      	movs	r3, #4
 800248e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002490:	2303      	movs	r3, #3
 8002492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 0318 	add.w	r3, r7, #24
 8002498:	4619      	mov	r1, r3
 800249a:	4809      	ldr	r0, [pc, #36]	@ (80024c0 <HAL_ADC_MspInit+0xe4>)
 800249c:	f001 f816 	bl	80034cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	2012      	movs	r0, #18
 80024a6:	f000 ffda 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80024aa:	2012      	movs	r0, #18
 80024ac:	f000 fff3 	bl	8003496 <HAL_NVIC_EnableIRQ>
}
 80024b0:	bf00      	nop
 80024b2:	3728      	adds	r7, #40	@ 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40012400 	.word	0x40012400
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010800 	.word	0x40010800
 80024c4:	40012800 	.word	0x40012800

080024c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	@ 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002554 <HAL_SPI_MspInit+0x8c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d131      	bne.n	800254c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002558 <HAL_SPI_MspInit+0x90>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002558 <HAL_SPI_MspInit+0x90>)
 80024ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024f2:	6193      	str	r3, [r2, #24]
 80024f4:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <HAL_SPI_MspInit+0x90>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002500:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <HAL_SPI_MspInit+0x90>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a14      	ldr	r2, [pc, #80]	@ (8002558 <HAL_SPI_MspInit+0x90>)
 8002506:	f043 0308 	orr.w	r3, r3, #8
 800250a:	6193      	str	r3, [r2, #24]
 800250c:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_SPI_MspInit+0x90>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002518:	2328      	movs	r3, #40	@ 0x28
 800251a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251c:	2302      	movs	r3, #2
 800251e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	4619      	mov	r1, r3
 800252a:	480c      	ldr	r0, [pc, #48]	@ (800255c <HAL_SPI_MspInit+0x94>)
 800252c:	f000 ffce 	bl	80034cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002530:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <HAL_SPI_MspInit+0x98>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
 8002546:	4a06      	ldr	r2, [pc, #24]	@ (8002560 <HAL_SPI_MspInit+0x98>)
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	6053      	str	r3, [r2, #4]

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800254c:	bf00      	nop
 800254e:	3728      	adds	r7, #40	@ 0x28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40013000 	.word	0x40013000
 8002558:	40021000 	.word	0x40021000
 800255c:	40010c00 	.word	0x40010c00
 8002560:	40010000 	.word	0x40010000

08002564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002574:	d113      	bne.n	800259e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <HAL_TIM_Base_MspInit+0x44>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a0b      	ldr	r2, [pc, #44]	@ (80025a8 <HAL_TIM_Base_MspInit+0x44>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	61d3      	str	r3, [r2, #28]
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_TIM_Base_MspInit+0x44>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	201c      	movs	r0, #28
 8002594:	f000 ff63 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002598:	201c      	movs	r0, #28
 800259a:	f000 ff7c 	bl	8003496 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002638 <HAL_UART_MspInit+0x8c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d131      	bne.n	8002630 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_UART_MspInit+0x90>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	4a1a      	ldr	r2, [pc, #104]	@ (800263c <HAL_UART_MspInit+0x90>)
 80025d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d6:	61d3      	str	r3, [r2, #28]
 80025d8:	4b18      	ldr	r3, [pc, #96]	@ (800263c <HAL_UART_MspInit+0x90>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e4:	4b15      	ldr	r3, [pc, #84]	@ (800263c <HAL_UART_MspInit+0x90>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a14      	ldr	r2, [pc, #80]	@ (800263c <HAL_UART_MspInit+0x90>)
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b12      	ldr	r3, [pc, #72]	@ (800263c <HAL_UART_MspInit+0x90>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002600:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260a:	f107 0310 	add.w	r3, r7, #16
 800260e:	4619      	mov	r1, r3
 8002610:	480b      	ldr	r0, [pc, #44]	@ (8002640 <HAL_UART_MspInit+0x94>)
 8002612:	f000 ff5b 	bl	80034cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002616:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800261a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	4619      	mov	r1, r3
 800262a:	4805      	ldr	r0, [pc, #20]	@ (8002640 <HAL_UART_MspInit+0x94>)
 800262c:	f000 ff4e 	bl	80034cc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002630:	bf00      	nop
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40004800 	.word	0x40004800
 800263c:	40021000 	.word	0x40021000
 8002640:	40010c00 	.word	0x40010c00

08002644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <NMI_Handler+0x4>

0800264c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <HardFault_Handler+0x4>

08002654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <MemManage_Handler+0x4>

0800265c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <BusFault_Handler+0x4>

08002664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <UsageFault_Handler+0x4>

0800266c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002694:	f000 f89a 	bl	80027cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}

0800269c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026a0:	4803      	ldr	r0, [pc, #12]	@ (80026b0 <ADC1_2_IRQHandler+0x14>)
 80026a2:	f000 fb97 	bl	8002dd4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80026a6:	4803      	ldr	r0, [pc, #12]	@ (80026b4 <ADC1_2_IRQHandler+0x18>)
 80026a8:	f000 fb94 	bl	8002dd4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000050 	.word	0x20000050
 80026b4:	20000080 	.word	0x20000080

080026b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTON_OK_Pin);
 80026bc:	2020      	movs	r0, #32
 80026be:	f001 f8bb 	bl	8003838 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_FLECHA_Pin);
 80026c2:	2040      	movs	r0, #64	@ 0x40
 80026c4:	f001 f8b8 	bl	8003838 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_ESC_Pin);
 80026c8:	2080      	movs	r0, #128	@ 0x80
 80026ca:	f001 f8b5 	bl	8003838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026d8:	4802      	ldr	r0, [pc, #8]	@ (80026e4 <TIM2_IRQHandler+0x10>)
 80026da:	f002 f97f 	bl	80049dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000108 	.word	0x20000108

080026e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026f4:	f7ff fff8 	bl	80026e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026f8:	480b      	ldr	r0, [pc, #44]	@ (8002728 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026fa:	490c      	ldr	r1, [pc, #48]	@ (800272c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002730 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002700:	e002      	b.n	8002708 <LoopCopyDataInit>

08002702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002706:	3304      	adds	r3, #4

08002708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800270c:	d3f9      	bcc.n	8002702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800270e:	4a09      	ldr	r2, [pc, #36]	@ (8002734 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002710:	4c09      	ldr	r4, [pc, #36]	@ (8002738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002714:	e001      	b.n	800271a <LoopFillZerobss>

08002716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002718:	3204      	adds	r2, #4

0800271a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800271c:	d3fb      	bcc.n	8002716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800271e:	f002 feed 	bl	80054fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002722:	f7fe fc2d 	bl	8000f80 <main>
  bx lr
 8002726:	4770      	bx	lr
  ldr r0, =_sdata
 8002728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800272c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002730:	08006c00 	.word	0x08006c00
  ldr r2, =_sbss
 8002734:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002738:	2000027c 	.word	0x2000027c

0800273c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800273c:	e7fe      	b.n	800273c <CAN1_RX1_IRQHandler>
	...

08002740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002744:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <HAL_Init+0x28>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a07      	ldr	r2, [pc, #28]	@ (8002768 <HAL_Init+0x28>)
 800274a:	f043 0310 	orr.w	r3, r3, #16
 800274e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002750:	2003      	movs	r0, #3
 8002752:	f000 fe79 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002756:	200f      	movs	r0, #15
 8002758:	f000 f808 	bl	800276c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800275c:	f7ff fe0c 	bl	8002378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40022000 	.word	0x40022000

0800276c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002774:	4b12      	ldr	r3, [pc, #72]	@ (80027c0 <HAL_InitTick+0x54>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_InitTick+0x58>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002782:	fbb3 f3f1 	udiv	r3, r3, r1
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fe91 	bl	80034b2 <HAL_SYSTICK_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e00e      	b.n	80027b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b0f      	cmp	r3, #15
 800279e:	d80a      	bhi.n	80027b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a0:	2200      	movs	r2, #0
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f000 fe59 	bl	800345e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027ac:	4a06      	ldr	r2, [pc, #24]	@ (80027c8 <HAL_InitTick+0x5c>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e000      	b.n	80027b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	2000001c 	.word	0x2000001c
 80027c4:	20000024 	.word	0x20000024
 80027c8:	20000020 	.word	0x20000020

080027cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d0:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <HAL_IncTick+0x1c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_IncTick+0x20>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	4a03      	ldr	r2, [pc, #12]	@ (80027ec <HAL_IncTick+0x20>)
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	20000024 	.word	0x20000024
 80027ec:	20000278 	.word	0x20000278

080027f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return uwTick;
 80027f4:	4b02      	ldr	r3, [pc, #8]	@ (8002800 <HAL_GetTick+0x10>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	20000278 	.word	0x20000278

08002804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800280c:	f7ff fff0 	bl	80027f0 <HAL_GetTick>
 8002810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d005      	beq.n	800282a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281e:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <HAL_Delay+0x44>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800282a:	bf00      	nop
 800282c:	f7ff ffe0 	bl	80027f0 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d8f7      	bhi.n	800282c <HAL_Delay+0x28>
  {
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000024 	.word	0x20000024

0800284c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0be      	b.n	80029ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff fda6 	bl	80023dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fcc3 	bl	800321c <ADC_ConversionStop_Disable>
 8002896:	4603      	mov	r3, r0
 8002898:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 8099 	bne.w	80029da <HAL_ADC_Init+0x18e>
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 8095 	bne.w	80029da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028b8:	f023 0302 	bic.w	r3, r3, #2
 80028bc:	f043 0202 	orr.w	r2, r3, #2
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7b1b      	ldrb	r3, [r3, #12]
 80028d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e4:	d003      	beq.n	80028ee <HAL_ADC_Init+0xa2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d102      	bne.n	80028f4 <HAL_ADC_Init+0xa8>
 80028ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028f2:	e000      	b.n	80028f6 <HAL_ADC_Init+0xaa>
 80028f4:	2300      	movs	r3, #0
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7d1b      	ldrb	r3, [r3, #20]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d119      	bne.n	8002938 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7b1b      	ldrb	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	3b01      	subs	r3, #1
 8002912:	035a      	lsls	r2, r3, #13
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	e00b      	b.n	8002938 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	4b28      	ldr	r3, [pc, #160]	@ (80029f4 <HAL_ADC_Init+0x1a8>)
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	430b      	orrs	r3, r1
 800295e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002968:	d003      	beq.n	8002972 <HAL_ADC_Init+0x126>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d104      	bne.n	800297c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	3b01      	subs	r3, #1
 8002978:	051b      	lsls	r3, r3, #20
 800297a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	430a      	orrs	r2, r1
 800298e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	4b18      	ldr	r3, [pc, #96]	@ (80029f8 <HAL_ADC_Init+0x1ac>)
 8002998:	4013      	ands	r3, r2
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	429a      	cmp	r2, r3
 800299e:	d10b      	bne.n	80029b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029aa:	f023 0303 	bic.w	r3, r3, #3
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029b6:	e018      	b.n	80029ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	f023 0312 	bic.w	r3, r3, #18
 80029c0:	f043 0210 	orr.w	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029d8:	e007      	b.n	80029ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	f043 0210 	orr.w	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	ffe1f7fd 	.word	0xffe1f7fd
 80029f8:	ff1f0efe 	.word	0xff1f0efe

080029fc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_Start+0x1a>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e098      	b.n	8002b48 <HAL_ADC_Start+0x14c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fba2 	bl	8003168 <ADC_Enable>
 8002a24:	4603      	mov	r3, r0
 8002a26:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 8087 	bne.w	8002b3e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a41      	ldr	r2, [pc, #260]	@ (8002b50 <HAL_ADC_Start+0x154>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d105      	bne.n	8002a5a <HAL_ADC_Start+0x5e>
 8002a4e:	4b41      	ldr	r3, [pc, #260]	@ (8002b54 <HAL_ADC_Start+0x158>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d115      	bne.n	8002a86 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d026      	beq.n	8002ac2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a84:	e01d      	b.n	8002ac2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2f      	ldr	r2, [pc, #188]	@ (8002b54 <HAL_ADC_Start+0x158>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_ADC_Start+0xaa>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8002b50 <HAL_ADC_Start+0x154>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_ADC_Start+0xc6>
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_ADC_Start+0x158>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	f023 0206 	bic.w	r2, r3, #6
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ada:	e002      	b.n	8002ae2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f06f 0202 	mvn.w	r2, #2
 8002af2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002afe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002b02:	d113      	bne.n	8002b2c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b08:	4a11      	ldr	r2, [pc, #68]	@ (8002b50 <HAL_ADC_Start+0x154>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d105      	bne.n	8002b1a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b0e:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <HAL_ADC_Start+0x158>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d108      	bne.n	8002b2c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	e00c      	b.n	8002b46 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	e003      	b.n	8002b46 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40012800 	.word	0x40012800
 8002b54:	40012400 	.word	0x40012400

08002b58 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_Stop+0x1a>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e01a      	b.n	8002ba8 <HAL_ADC_Stop+0x50>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fb4e 	bl	800321c <ADC_ConversionStop_Disable>
 8002b80:	4603      	mov	r3, r0
 8002b82:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002bc6:	f7ff fe13 	bl	80027f0 <HAL_GetTick>
 8002bca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0d3      	b.n	8002d9a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d131      	bne.n	8002c64 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d12a      	bne.n	8002c64 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c0e:	e021      	b.n	8002c54 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c16:	d01d      	beq.n	8002c54 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <HAL_ADC_PollForConversion+0x7e>
 8002c1e:	f7ff fde7 	bl	80027f0 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d212      	bcs.n	8002c54 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	f043 0204 	orr.w	r2, r3, #4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0a2      	b.n	8002d9a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0d6      	beq.n	8002c10 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c62:	e070      	b.n	8002d46 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c64:	4b4f      	ldr	r3, [pc, #316]	@ (8002da4 <HAL_ADC_PollForConversion+0x1f4>)
 8002c66:	681c      	ldr	r4, [r3, #0]
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f001 fac3 	bl	80041f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6919      	ldr	r1, [r3, #16]
 8002c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8002da8 <HAL_ADC_PollForConversion+0x1f8>)
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d118      	bne.n	8002cb4 <HAL_ADC_PollForConversion+0x104>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68d9      	ldr	r1, [r3, #12]
 8002c88:	4b48      	ldr	r3, [pc, #288]	@ (8002dac <HAL_ADC_PollForConversion+0x1fc>)
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d111      	bne.n	8002cb4 <HAL_ADC_PollForConversion+0x104>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6919      	ldr	r1, [r3, #16]
 8002c96:	4b46      	ldr	r3, [pc, #280]	@ (8002db0 <HAL_ADC_PollForConversion+0x200>)
 8002c98:	400b      	ands	r3, r1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d108      	bne.n	8002cb0 <HAL_ADC_PollForConversion+0x100>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68d9      	ldr	r1, [r3, #12]
 8002ca4:	4b43      	ldr	r3, [pc, #268]	@ (8002db4 <HAL_ADC_PollForConversion+0x204>)
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_PollForConversion+0x100>
 8002cac:	2314      	movs	r3, #20
 8002cae:	e020      	b.n	8002cf2 <HAL_ADC_PollForConversion+0x142>
 8002cb0:	2329      	movs	r3, #41	@ 0x29
 8002cb2:	e01e      	b.n	8002cf2 <HAL_ADC_PollForConversion+0x142>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6919      	ldr	r1, [r3, #16]
 8002cba:	4b3d      	ldr	r3, [pc, #244]	@ (8002db0 <HAL_ADC_PollForConversion+0x200>)
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_ADC_PollForConversion+0x120>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68d9      	ldr	r1, [r3, #12]
 8002cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8002db4 <HAL_ADC_PollForConversion+0x204>)
 8002cca:	400b      	ands	r3, r1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <HAL_ADC_PollForConversion+0x13c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6919      	ldr	r1, [r3, #16]
 8002cd6:	4b38      	ldr	r3, [pc, #224]	@ (8002db8 <HAL_ADC_PollForConversion+0x208>)
 8002cd8:	400b      	ands	r3, r1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d108      	bne.n	8002cf0 <HAL_ADC_PollForConversion+0x140>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68d9      	ldr	r1, [r3, #12]
 8002ce4:	4b34      	ldr	r3, [pc, #208]	@ (8002db8 <HAL_ADC_PollForConversion+0x208>)
 8002ce6:	400b      	ands	r3, r1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_ADC_PollForConversion+0x140>
 8002cec:	2354      	movs	r3, #84	@ 0x54
 8002cee:	e000      	b.n	8002cf2 <HAL_ADC_PollForConversion+0x142>
 8002cf0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cf8:	e021      	b.n	8002d3e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d01a      	beq.n	8002d38 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <HAL_ADC_PollForConversion+0x168>
 8002d08:	f7ff fd72 	bl	80027f0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d20f      	bcs.n	8002d38 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d90b      	bls.n	8002d38 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	f043 0204 	orr.w	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e030      	b.n	8002d9a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d8d9      	bhi.n	8002cfa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f06f 0212 	mvn.w	r2, #18
 8002d4e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002d66:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002d6a:	d115      	bne.n	8002d98 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd90      	pop	{r4, r7, pc}
 8002da2:	bf00      	nop
 8002da4:	2000001c 	.word	0x2000001c
 8002da8:	24924924 	.word	0x24924924
 8002dac:	00924924 	.word	0x00924924
 8002db0:	12492492 	.word	0x12492492
 8002db4:	00492492 	.word	0x00492492
 8002db8:	00249249 	.word	0x00249249

08002dbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d03e      	beq.n	8002e74 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d039      	beq.n	8002e74 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002e22:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e26:	d11d      	bne.n	8002e64 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d119      	bne.n	8002e64 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0220 	bic.w	r2, r2, #32
 8002e3e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f874 	bl	8002f52 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f06f 0212 	mvn.w	r2, #18
 8002e72:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d04d      	beq.n	8002f1a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d048      	beq.n	8002f1a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e98:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002eaa:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002eae:	d012      	beq.n	8002ed6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d125      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002ec8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002ecc:	d11d      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d119      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ee4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d105      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9c7 	bl	800329e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 020c 	mvn.w	r2, #12
 8002f18:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d012      	beq.n	8002f4a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f812 	bl	8002f64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0201 	mvn.w	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x20>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e0dc      	b.n	8003152 <HAL_ADC_ConfigChannel+0x1da>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b06      	cmp	r3, #6
 8002fa6:	d81c      	bhi.n	8002fe2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3b05      	subs	r3, #5
 8002fba:	221f      	movs	r2, #31
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	4019      	ands	r1, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3b05      	subs	r3, #5
 8002fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fe0:	e03c      	b.n	800305c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d81c      	bhi.n	8003024 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3b23      	subs	r3, #35	@ 0x23
 8002ffc:	221f      	movs	r2, #31
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	4019      	ands	r1, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	3b23      	subs	r3, #35	@ 0x23
 8003016:	fa00 f203 	lsl.w	r2, r0, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
 8003022:	e01b      	b.n	800305c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	3b41      	subs	r3, #65	@ 0x41
 8003036:	221f      	movs	r2, #31
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	4019      	ands	r1, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	3b41      	subs	r3, #65	@ 0x41
 8003050:	fa00 f203 	lsl.w	r2, r0, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b09      	cmp	r3, #9
 8003062:	d91c      	bls.n	800309e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68d9      	ldr	r1, [r3, #12]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	3b1e      	subs	r3, #30
 8003076:	2207      	movs	r2, #7
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	4019      	ands	r1, r3
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6898      	ldr	r0, [r3, #8]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	3b1e      	subs	r3, #30
 8003090:	fa00 f203 	lsl.w	r2, r0, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	60da      	str	r2, [r3, #12]
 800309c:	e019      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6919      	ldr	r1, [r3, #16]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	2207      	movs	r2, #7
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4019      	ands	r1, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6898      	ldr	r0, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b10      	cmp	r3, #16
 80030d8:	d003      	beq.n	80030e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030de:	2b11      	cmp	r3, #17
 80030e0:	d132      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1d      	ldr	r2, [pc, #116]	@ (800315c <HAL_ADC_ConfigChannel+0x1e4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d125      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d126      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003108:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b10      	cmp	r3, #16
 8003110:	d11a      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003112:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <HAL_ADC_ConfigChannel+0x1e8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a13      	ldr	r2, [pc, #76]	@ (8003164 <HAL_ADC_ConfigChannel+0x1ec>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	0c9a      	lsrs	r2, r3, #18
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003128:	e002      	b.n	8003130 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	3b01      	subs	r3, #1
 800312e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f9      	bne.n	800312a <HAL_ADC_ConfigChannel+0x1b2>
 8003136:	e007      	b.n	8003148 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	40012400 	.word	0x40012400
 8003160:	2000001c 	.word	0x2000001c
 8003164:	431bde83 	.word	0x431bde83

08003168 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d040      	beq.n	8003208 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003196:	4b1f      	ldr	r3, [pc, #124]	@ (8003214 <ADC_Enable+0xac>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1f      	ldr	r2, [pc, #124]	@ (8003218 <ADC_Enable+0xb0>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031a4:	e002      	b.n	80031ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f9      	bne.n	80031a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031b2:	f7ff fb1d 	bl	80027f0 <HAL_GetTick>
 80031b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031b8:	e01f      	b.n	80031fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031ba:	f7ff fb19 	bl	80027f0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d918      	bls.n	80031fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d011      	beq.n	80031fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	f043 0210 	orr.w	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e007      	b.n	800320a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d1d8      	bne.n	80031ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	2000001c 	.word	0x2000001c
 8003218:	431bde83 	.word	0x431bde83

0800321c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d12e      	bne.n	8003294 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0201 	bic.w	r2, r2, #1
 8003244:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003246:	f7ff fad3 	bl	80027f0 <HAL_GetTick>
 800324a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800324c:	e01b      	b.n	8003286 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800324e:	f7ff facf 	bl	80027f0 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d914      	bls.n	8003286 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10d      	bne.n	8003286 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	f043 0210 	orr.w	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e007      	b.n	8003296 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d0dc      	beq.n	800324e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c0:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032cc:	4013      	ands	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e2:	4a04      	ldr	r2, [pc, #16]	@ (80032f4 <__NVIC_SetPriorityGrouping+0x44>)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	60d3      	str	r3, [r2, #12]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032fc:	4b04      	ldr	r3, [pc, #16]	@ (8003310 <__NVIC_GetPriorityGrouping+0x18>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	f003 0307 	and.w	r3, r3, #7
}
 8003306:	4618      	mov	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	2b00      	cmp	r3, #0
 8003324:	db0b      	blt.n	800333e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	4906      	ldr	r1, [pc, #24]	@ (8003348 <__NVIC_EnableIRQ+0x34>)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2001      	movs	r0, #1
 8003336:	fa00 f202 	lsl.w	r2, r0, r2
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	e000e100 	.word	0xe000e100

0800334c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335c:	2b00      	cmp	r3, #0
 800335e:	db0a      	blt.n	8003376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	490c      	ldr	r1, [pc, #48]	@ (8003398 <__NVIC_SetPriority+0x4c>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	0112      	lsls	r2, r2, #4
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	440b      	add	r3, r1
 8003370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003374:	e00a      	b.n	800338c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4908      	ldr	r1, [pc, #32]	@ (800339c <__NVIC_SetPriority+0x50>)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	3b04      	subs	r3, #4
 8003384:	0112      	lsls	r2, r2, #4
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	440b      	add	r3, r1
 800338a:	761a      	strb	r2, [r3, #24]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000e100 	.word	0xe000e100
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	@ 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f1c3 0307 	rsb	r3, r3, #7
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	bf28      	it	cs
 80033be:	2304      	movcs	r3, #4
 80033c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d902      	bls.n	80033d0 <NVIC_EncodePriority+0x30>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3b03      	subs	r3, #3
 80033ce:	e000      	b.n	80033d2 <NVIC_EncodePriority+0x32>
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	401a      	ands	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	43d9      	mvns	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	4313      	orrs	r3, r2
         );
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3724      	adds	r7, #36	@ 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003414:	d301      	bcc.n	800341a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003416:	2301      	movs	r3, #1
 8003418:	e00f      	b.n	800343a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341a:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <SysTick_Config+0x40>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003422:	210f      	movs	r1, #15
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	f7ff ff90 	bl	800334c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800342c:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <SysTick_Config+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003432:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <SysTick_Config+0x40>)
 8003434:	2207      	movs	r2, #7
 8003436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff2d 	bl	80032b0 <__NVIC_SetPriorityGrouping>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003470:	f7ff ff42 	bl	80032f8 <__NVIC_GetPriorityGrouping>
 8003474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f7ff ff90 	bl	80033a0 <NVIC_EncodePriority>
 8003480:	4602      	mov	r2, r0
 8003482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff5f 	bl	800334c <__NVIC_SetPriority>
}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff35 	bl	8003314 <__NVIC_EnableIRQ>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffa2 	bl	8003404 <SysTick_Config>
 80034c0:	4603      	mov	r3, r0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b08b      	sub	sp, #44	@ 0x2c
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034da:	2300      	movs	r3, #0
 80034dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034de:	e169      	b.n	80037b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034e0:	2201      	movs	r2, #1
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	f040 8158 	bne.w	80037ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4a9a      	ldr	r2, [pc, #616]	@ (800376c <HAL_GPIO_Init+0x2a0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d05e      	beq.n	80035c6 <HAL_GPIO_Init+0xfa>
 8003508:	4a98      	ldr	r2, [pc, #608]	@ (800376c <HAL_GPIO_Init+0x2a0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d875      	bhi.n	80035fa <HAL_GPIO_Init+0x12e>
 800350e:	4a98      	ldr	r2, [pc, #608]	@ (8003770 <HAL_GPIO_Init+0x2a4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d058      	beq.n	80035c6 <HAL_GPIO_Init+0xfa>
 8003514:	4a96      	ldr	r2, [pc, #600]	@ (8003770 <HAL_GPIO_Init+0x2a4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d86f      	bhi.n	80035fa <HAL_GPIO_Init+0x12e>
 800351a:	4a96      	ldr	r2, [pc, #600]	@ (8003774 <HAL_GPIO_Init+0x2a8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d052      	beq.n	80035c6 <HAL_GPIO_Init+0xfa>
 8003520:	4a94      	ldr	r2, [pc, #592]	@ (8003774 <HAL_GPIO_Init+0x2a8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d869      	bhi.n	80035fa <HAL_GPIO_Init+0x12e>
 8003526:	4a94      	ldr	r2, [pc, #592]	@ (8003778 <HAL_GPIO_Init+0x2ac>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d04c      	beq.n	80035c6 <HAL_GPIO_Init+0xfa>
 800352c:	4a92      	ldr	r2, [pc, #584]	@ (8003778 <HAL_GPIO_Init+0x2ac>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d863      	bhi.n	80035fa <HAL_GPIO_Init+0x12e>
 8003532:	4a92      	ldr	r2, [pc, #584]	@ (800377c <HAL_GPIO_Init+0x2b0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d046      	beq.n	80035c6 <HAL_GPIO_Init+0xfa>
 8003538:	4a90      	ldr	r2, [pc, #576]	@ (800377c <HAL_GPIO_Init+0x2b0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d85d      	bhi.n	80035fa <HAL_GPIO_Init+0x12e>
 800353e:	2b12      	cmp	r3, #18
 8003540:	d82a      	bhi.n	8003598 <HAL_GPIO_Init+0xcc>
 8003542:	2b12      	cmp	r3, #18
 8003544:	d859      	bhi.n	80035fa <HAL_GPIO_Init+0x12e>
 8003546:	a201      	add	r2, pc, #4	@ (adr r2, 800354c <HAL_GPIO_Init+0x80>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	080035c7 	.word	0x080035c7
 8003550:	080035a1 	.word	0x080035a1
 8003554:	080035b3 	.word	0x080035b3
 8003558:	080035f5 	.word	0x080035f5
 800355c:	080035fb 	.word	0x080035fb
 8003560:	080035fb 	.word	0x080035fb
 8003564:	080035fb 	.word	0x080035fb
 8003568:	080035fb 	.word	0x080035fb
 800356c:	080035fb 	.word	0x080035fb
 8003570:	080035fb 	.word	0x080035fb
 8003574:	080035fb 	.word	0x080035fb
 8003578:	080035fb 	.word	0x080035fb
 800357c:	080035fb 	.word	0x080035fb
 8003580:	080035fb 	.word	0x080035fb
 8003584:	080035fb 	.word	0x080035fb
 8003588:	080035fb 	.word	0x080035fb
 800358c:	080035fb 	.word	0x080035fb
 8003590:	080035a9 	.word	0x080035a9
 8003594:	080035bd 	.word	0x080035bd
 8003598:	4a79      	ldr	r2, [pc, #484]	@ (8003780 <HAL_GPIO_Init+0x2b4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800359e:	e02c      	b.n	80035fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	623b      	str	r3, [r7, #32]
          break;
 80035a6:	e029      	b.n	80035fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	3304      	adds	r3, #4
 80035ae:	623b      	str	r3, [r7, #32]
          break;
 80035b0:	e024      	b.n	80035fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	3308      	adds	r3, #8
 80035b8:	623b      	str	r3, [r7, #32]
          break;
 80035ba:	e01f      	b.n	80035fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	330c      	adds	r3, #12
 80035c2:	623b      	str	r3, [r7, #32]
          break;
 80035c4:	e01a      	b.n	80035fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035ce:	2304      	movs	r3, #4
 80035d0:	623b      	str	r3, [r7, #32]
          break;
 80035d2:	e013      	b.n	80035fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d105      	bne.n	80035e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035dc:	2308      	movs	r3, #8
 80035de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	611a      	str	r2, [r3, #16]
          break;
 80035e6:	e009      	b.n	80035fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035e8:	2308      	movs	r3, #8
 80035ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	615a      	str	r2, [r3, #20]
          break;
 80035f2:	e003      	b.n	80035fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035f4:	2300      	movs	r3, #0
 80035f6:	623b      	str	r3, [r7, #32]
          break;
 80035f8:	e000      	b.n	80035fc <HAL_GPIO_Init+0x130>
          break;
 80035fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2bff      	cmp	r3, #255	@ 0xff
 8003600:	d801      	bhi.n	8003606 <HAL_GPIO_Init+0x13a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	e001      	b.n	800360a <HAL_GPIO_Init+0x13e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2bff      	cmp	r3, #255	@ 0xff
 8003610:	d802      	bhi.n	8003618 <HAL_GPIO_Init+0x14c>
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	e002      	b.n	800361e <HAL_GPIO_Init+0x152>
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	3b08      	subs	r3, #8
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	210f      	movs	r1, #15
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	6a39      	ldr	r1, [r7, #32]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	431a      	orrs	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80b1 	beq.w	80037ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800364c:	4b4d      	ldr	r3, [pc, #308]	@ (8003784 <HAL_GPIO_Init+0x2b8>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	4a4c      	ldr	r2, [pc, #304]	@ (8003784 <HAL_GPIO_Init+0x2b8>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6193      	str	r3, [r2, #24]
 8003658:	4b4a      	ldr	r3, [pc, #296]	@ (8003784 <HAL_GPIO_Init+0x2b8>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003664:	4a48      	ldr	r2, [pc, #288]	@ (8003788 <HAL_GPIO_Init+0x2bc>)
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	089b      	lsrs	r3, r3, #2
 800366a:	3302      	adds	r3, #2
 800366c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003670:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	220f      	movs	r2, #15
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a40      	ldr	r2, [pc, #256]	@ (800378c <HAL_GPIO_Init+0x2c0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <HAL_GPIO_Init+0x1ec>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3f      	ldr	r2, [pc, #252]	@ (8003790 <HAL_GPIO_Init+0x2c4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00d      	beq.n	80036b4 <HAL_GPIO_Init+0x1e8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3e      	ldr	r2, [pc, #248]	@ (8003794 <HAL_GPIO_Init+0x2c8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d007      	beq.n	80036b0 <HAL_GPIO_Init+0x1e4>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a3d      	ldr	r2, [pc, #244]	@ (8003798 <HAL_GPIO_Init+0x2cc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d101      	bne.n	80036ac <HAL_GPIO_Init+0x1e0>
 80036a8:	2303      	movs	r3, #3
 80036aa:	e006      	b.n	80036ba <HAL_GPIO_Init+0x1ee>
 80036ac:	2304      	movs	r3, #4
 80036ae:	e004      	b.n	80036ba <HAL_GPIO_Init+0x1ee>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e002      	b.n	80036ba <HAL_GPIO_Init+0x1ee>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_GPIO_Init+0x1ee>
 80036b8:	2300      	movs	r3, #0
 80036ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036bc:	f002 0203 	and.w	r2, r2, #3
 80036c0:	0092      	lsls	r2, r2, #2
 80036c2:	4093      	lsls	r3, r2
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036ca:	492f      	ldr	r1, [pc, #188]	@ (8003788 <HAL_GPIO_Init+0x2bc>)
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	3302      	adds	r3, #2
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d006      	beq.n	80036f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036e4:	4b2d      	ldr	r3, [pc, #180]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	492c      	ldr	r1, [pc, #176]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	608b      	str	r3, [r1, #8]
 80036f0:	e006      	b.n	8003700 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036f2:	4b2a      	ldr	r3, [pc, #168]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	4928      	ldr	r1, [pc, #160]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800370c:	4b23      	ldr	r3, [pc, #140]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	4922      	ldr	r1, [pc, #136]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	60cb      	str	r3, [r1, #12]
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800371a:	4b20      	ldr	r3, [pc, #128]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	43db      	mvns	r3, r3
 8003722:	491e      	ldr	r1, [pc, #120]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 8003724:	4013      	ands	r3, r2
 8003726:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d006      	beq.n	8003742 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003734:	4b19      	ldr	r3, [pc, #100]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	4918      	ldr	r1, [pc, #96]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003742:	4b16      	ldr	r3, [pc, #88]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	43db      	mvns	r3, r3
 800374a:	4914      	ldr	r1, [pc, #80]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 800374c:	4013      	ands	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d021      	beq.n	80037a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800375c:	4b0f      	ldr	r3, [pc, #60]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	490e      	ldr	r1, [pc, #56]	@ (800379c <HAL_GPIO_Init+0x2d0>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]
 8003768:	e021      	b.n	80037ae <HAL_GPIO_Init+0x2e2>
 800376a:	bf00      	nop
 800376c:	10320000 	.word	0x10320000
 8003770:	10310000 	.word	0x10310000
 8003774:	10220000 	.word	0x10220000
 8003778:	10210000 	.word	0x10210000
 800377c:	10120000 	.word	0x10120000
 8003780:	10110000 	.word	0x10110000
 8003784:	40021000 	.word	0x40021000
 8003788:	40010000 	.word	0x40010000
 800378c:	40010800 	.word	0x40010800
 8003790:	40010c00 	.word	0x40010c00
 8003794:	40011000 	.word	0x40011000
 8003798:	40011400 	.word	0x40011400
 800379c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_GPIO_Init+0x304>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	4909      	ldr	r1, [pc, #36]	@ (80037d0 <HAL_GPIO_Init+0x304>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	3301      	adds	r3, #1
 80037b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	fa22 f303 	lsr.w	r3, r2, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f47f ae8e 	bne.w	80034e0 <HAL_GPIO_Init+0x14>
  }
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	372c      	adds	r7, #44	@ 0x2c
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	40010400 	.word	0x40010400

080037d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	807b      	strh	r3, [r7, #2]
 80037e0:	4613      	mov	r3, r2
 80037e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037e4:	787b      	ldrb	r3, [r7, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037f0:	e003      	b.n	80037fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037f2:	887b      	ldrh	r3, [r7, #2]
 80037f4:	041a      	lsls	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	611a      	str	r2, [r3, #16]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4013      	ands	r3, r2
 800381c:	041a      	lsls	r2, r3, #16
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	43d9      	mvns	r1, r3
 8003822:	887b      	ldrh	r3, [r7, #2]
 8003824:	400b      	ands	r3, r1
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	611a      	str	r2, [r3, #16]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
	...

08003838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003842:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d006      	beq.n	800385c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800384e:	4a05      	ldr	r2, [pc, #20]	@ (8003864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fd fffe 	bl	8001858 <HAL_GPIO_EXTI_Callback>
  }
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40010400 	.word	0x40010400

08003868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e272      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8087 	beq.w	8003996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003888:	4b92      	ldr	r3, [pc, #584]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b04      	cmp	r3, #4
 8003892:	d00c      	beq.n	80038ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003894:	4b8f      	ldr	r3, [pc, #572]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d112      	bne.n	80038c6 <HAL_RCC_OscConfig+0x5e>
 80038a0:	4b8c      	ldr	r3, [pc, #560]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ac:	d10b      	bne.n	80038c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ae:	4b89      	ldr	r3, [pc, #548]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d06c      	beq.n	8003994 <HAL_RCC_OscConfig+0x12c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d168      	bne.n	8003994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e24c      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x76>
 80038d0:	4b80      	ldr	r3, [pc, #512]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e02e      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x98>
 80038e6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a7a      	ldr	r2, [pc, #488]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b78      	ldr	r3, [pc, #480]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a77      	ldr	r2, [pc, #476]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e01d      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0xbc>
 800390a:	4b72      	ldr	r3, [pc, #456]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a71      	ldr	r2, [pc, #452]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6e      	ldr	r2, [pc, #440]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 8003924:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6a      	ldr	r2, [pc, #424]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b68      	ldr	r3, [pc, #416]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a67      	ldr	r2, [pc, #412]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800393a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe ff54 	bl	80027f0 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7fe ff50 	bl	80027f0 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	@ 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e200      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0xe4>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fe ff40 	bl	80027f0 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fe ff3c 	bl	80027f0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	@ 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e1ec      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	4b53      	ldr	r3, [pc, #332]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x10c>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d063      	beq.n	8003a6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039a2:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039ae:	4b49      	ldr	r3, [pc, #292]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d11c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x18c>
 80039ba:	4b46      	ldr	r3, [pc, #280]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d116      	bne.n	80039f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	4b43      	ldr	r3, [pc, #268]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x176>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e1c0      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4939      	ldr	r1, [pc, #228]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f2:	e03a      	b.n	8003a6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039fc:	4b36      	ldr	r3, [pc, #216]	@ (8003ad8 <HAL_RCC_OscConfig+0x270>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7fe fef5 	bl	80027f0 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0a:	f7fe fef1 	bl	80027f0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e1a1      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a28:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4927      	ldr	r1, [pc, #156]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]
 8003a3c:	e015      	b.n	8003a6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3e:	4b26      	ldr	r3, [pc, #152]	@ (8003ad8 <HAL_RCC_OscConfig+0x270>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fe fed4 	bl	80027f0 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4c:	f7fe fed0 	bl	80027f0 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e180      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03a      	beq.n	8003aec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d019      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7e:	4b17      	ldr	r3, [pc, #92]	@ (8003adc <HAL_RCC_OscConfig+0x274>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fe feb4 	bl	80027f0 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fe feb0 	bl	80027f0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e160      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003aaa:	2001      	movs	r0, #1
 8003aac:	f000 face 	bl	800404c <RCC_Delay>
 8003ab0:	e01c      	b.n	8003aec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <HAL_RCC_OscConfig+0x274>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab8:	f7fe fe9a 	bl	80027f0 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003abe:	e00f      	b.n	8003ae0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac0:	f7fe fe96 	bl	80027f0 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d908      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e146      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	42420000 	.word	0x42420000
 8003adc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	4b92      	ldr	r3, [pc, #584]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e9      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a6 	beq.w	8003c46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afe:	4b8b      	ldr	r3, [pc, #556]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10d      	bne.n	8003b26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	4b88      	ldr	r3, [pc, #544]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4a87      	ldr	r2, [pc, #540]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b14:	61d3      	str	r3, [r2, #28]
 8003b16:	4b85      	ldr	r3, [pc, #532]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	4b82      	ldr	r3, [pc, #520]	@ (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d118      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b32:	4b7f      	ldr	r3, [pc, #508]	@ (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7e      	ldr	r2, [pc, #504]	@ (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3e:	f7fe fe57 	bl	80027f0 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7fe fe53 	bl	80027f0 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b64      	cmp	r3, #100	@ 0x64
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e103      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b75      	ldr	r3, [pc, #468]	@ (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x312>
 8003b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a6e      	ldr	r2, [pc, #440]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6213      	str	r3, [r2, #32]
 8003b78:	e02d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x334>
 8003b82:	4b6a      	ldr	r3, [pc, #424]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a69      	ldr	r2, [pc, #420]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	6213      	str	r3, [r2, #32]
 8003b8e:	4b67      	ldr	r3, [pc, #412]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4a66      	ldr	r2, [pc, #408]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	f023 0304 	bic.w	r3, r3, #4
 8003b98:	6213      	str	r3, [r2, #32]
 8003b9a:	e01c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d10c      	bne.n	8003bbe <HAL_RCC_OscConfig+0x356>
 8003ba4:	4b61      	ldr	r3, [pc, #388]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a60      	ldr	r2, [pc, #384]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4a5d      	ldr	r2, [pc, #372]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6213      	str	r3, [r2, #32]
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4a5a      	ldr	r2, [pc, #360]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	6213      	str	r3, [r2, #32]
 8003bca:	4b58      	ldr	r3, [pc, #352]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4a57      	ldr	r2, [pc, #348]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	f023 0304 	bic.w	r3, r3, #4
 8003bd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d015      	beq.n	8003c0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7fe fe07 	bl	80027f0 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fe fe03 	bl	80027f0 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e0b1      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ee      	beq.n	8003be6 <HAL_RCC_OscConfig+0x37e>
 8003c08:	e014      	b.n	8003c34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fe fdf1 	bl	80027f0 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fe fded 	bl	80027f0 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e09b      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c28:	4b40      	ldr	r3, [pc, #256]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ee      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8087 	beq.w	8003d5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c50:	4b36      	ldr	r3, [pc, #216]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d061      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d146      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c64:	4b33      	ldr	r3, [pc, #204]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7fe fdc1 	bl	80027f0 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fe fdbd 	bl	80027f0 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e06d      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c84:	4b29      	ldr	r3, [pc, #164]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c98:	d108      	bne.n	8003cac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c9a:	4b24      	ldr	r3, [pc, #144]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4921      	ldr	r1, [pc, #132]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cac:	4b1f      	ldr	r3, [pc, #124]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a19      	ldr	r1, [r3, #32]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	491b      	ldr	r1, [pc, #108]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fe fd91 	bl	80027f0 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fe fd8d 	bl	80027f0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e03d      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ce4:	4b11      	ldr	r3, [pc, #68]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x46a>
 8003cf0:	e035      	b.n	8003d5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fd7a 	bl	80027f0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fe fd76 	bl	80027f0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e026      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x498>
 8003d1e:	e01e      	b.n	8003d5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e019      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d38:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_RCC_OscConfig+0x500>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d001      	beq.n	8003d5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000

08003d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0d0      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d80:	4b6a      	ldr	r3, [pc, #424]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d910      	bls.n	8003db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b67      	ldr	r3, [pc, #412]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 0207 	bic.w	r2, r3, #7
 8003d96:	4965      	ldr	r1, [pc, #404]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b63      	ldr	r3, [pc, #396]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0b8      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc8:	4b59      	ldr	r3, [pc, #356]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a58      	ldr	r2, [pc, #352]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de0:	4b53      	ldr	r3, [pc, #332]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a52      	ldr	r2, [pc, #328]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003dea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4b50      	ldr	r3, [pc, #320]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	494d      	ldr	r1, [pc, #308]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d040      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	4b47      	ldr	r3, [pc, #284]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d115      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e07f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d107      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2a:	4b41      	ldr	r3, [pc, #260]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e073      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e06b      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e4a:	4b39      	ldr	r3, [pc, #228]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f023 0203 	bic.w	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4936      	ldr	r1, [pc, #216]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e5c:	f7fe fcc8 	bl	80027f0 <HAL_GetTick>
 8003e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	e00a      	b.n	8003e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e64:	f7fe fcc4 	bl	80027f0 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e053      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 020c 	and.w	r2, r3, #12
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d1eb      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b27      	ldr	r3, [pc, #156]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d210      	bcs.n	8003ebc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 0207 	bic.w	r2, r3, #7
 8003ea2:	4922      	ldr	r1, [pc, #136]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b20      	ldr	r3, [pc, #128]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e032      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec8:	4b19      	ldr	r3, [pc, #100]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4916      	ldr	r1, [pc, #88]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ee6:	4b12      	ldr	r3, [pc, #72]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	490e      	ldr	r1, [pc, #56]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003efa:	f000 f821 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8003efe:	4602      	mov	r2, r0
 8003f00:	4b0b      	ldr	r3, [pc, #44]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	490a      	ldr	r1, [pc, #40]	@ (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0c:	5ccb      	ldrb	r3, [r1, r3]
 8003f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f12:	4a09      	ldr	r2, [pc, #36]	@ (8003f38 <HAL_RCC_ClockConfig+0x1cc>)
 8003f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f16:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <HAL_RCC_ClockConfig+0x1d0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe fc26 	bl	800276c <HAL_InitTick>

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40022000 	.word	0x40022000
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08006b94 	.word	0x08006b94
 8003f38:	2000001c 	.word	0x2000001c
 8003f3c:	20000020 	.word	0x20000020

08003f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	2300      	movs	r3, #0
 8003f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d002      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x30>
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d003      	beq.n	8003f76 <HAL_RCC_GetSysClockFreq+0x36>
 8003f6e:	e027      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f70:	4b19      	ldr	r3, [pc, #100]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f72:	613b      	str	r3, [r7, #16]
      break;
 8003f74:	e027      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	0c9b      	lsrs	r3, r3, #18
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	4a17      	ldr	r2, [pc, #92]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f80:	5cd3      	ldrb	r3, [r2, r3]
 8003f82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f8e:	4b11      	ldr	r3, [pc, #68]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	0c5b      	lsrs	r3, r3, #17
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	4a11      	ldr	r2, [pc, #68]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f9a:	5cd3      	ldrb	r3, [r2, r3]
 8003f9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fa2:	fb03 f202 	mul.w	r2, r3, r2
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e004      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fb4:	fb02 f303 	mul.w	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	613b      	str	r3, [r7, #16]
      break;
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fc2:	613b      	str	r3, [r7, #16]
      break;
 8003fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc6:	693b      	ldr	r3, [r7, #16]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	007a1200 	.word	0x007a1200
 8003fdc:	08006bac 	.word	0x08006bac
 8003fe0:	08006bbc 	.word	0x08006bbc
 8003fe4:	003d0900 	.word	0x003d0900

08003fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b02      	ldr	r3, [pc, #8]	@ (8003ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	2000001c 	.word	0x2000001c

08003ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004000:	f7ff fff2 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b05      	ldr	r3, [pc, #20]	@ (800401c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4903      	ldr	r1, [pc, #12]	@ (8004020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	08006ba4 	.word	0x08006ba4

08004024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004028:	f7ff ffde 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	0adb      	lsrs	r3, r3, #11
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4903      	ldr	r1, [pc, #12]	@ (8004048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	08006ba4 	.word	0x08006ba4

0800404c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004054:	4b0a      	ldr	r3, [pc, #40]	@ (8004080 <RCC_Delay+0x34>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0a      	ldr	r2, [pc, #40]	@ (8004084 <RCC_Delay+0x38>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	0a5b      	lsrs	r3, r3, #9
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004068:	bf00      	nop
  }
  while (Delay --);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	60fa      	str	r2, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f9      	bne.n	8004068 <RCC_Delay+0x1c>
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	2000001c 	.word	0x2000001c
 8004084:	10624dd3 	.word	0x10624dd3

08004088 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d07d      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80040a4:	2300      	movs	r3, #0
 80040a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a8:	4b4f      	ldr	r3, [pc, #316]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10d      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b4:	4b4c      	ldr	r3, [pc, #304]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	4a4b      	ldr	r2, [pc, #300]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040be:	61d3      	str	r3, [r2, #28]
 80040c0:	4b49      	ldr	r3, [pc, #292]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040cc:	2301      	movs	r3, #1
 80040ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	4b46      	ldr	r3, [pc, #280]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d118      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040dc:	4b43      	ldr	r3, [pc, #268]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a42      	ldr	r2, [pc, #264]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e8:	f7fe fb82 	bl	80027f0 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ee:	e008      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f0:	f7fe fb7e 	bl	80027f0 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	@ 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e06d      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004102:	4b3a      	ldr	r3, [pc, #232]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800410e:	4b36      	ldr	r3, [pc, #216]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004116:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d02e      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	429a      	cmp	r2, r3
 800412a:	d027      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800412c:	4b2e      	ldr	r3, [pc, #184]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004134:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004136:	4b2e      	ldr	r3, [pc, #184]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004138:	2201      	movs	r2, #1
 800413a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800413c:	4b2c      	ldr	r3, [pc, #176]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004142:	4a29      	ldr	r2, [pc, #164]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d014      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7fe fb4d 	bl	80027f0 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004158:	e00a      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fe fb49 	bl	80027f0 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e036      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004170:	4b1d      	ldr	r3, [pc, #116]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0ee      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800417c:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4917      	ldr	r1, [pc, #92]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	4313      	orrs	r3, r2
 800418c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d105      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004194:	4b14      	ldr	r3, [pc, #80]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800419e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041ac:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	490b      	ldr	r1, [pc, #44]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d008      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ca:	4b07      	ldr	r3, [pc, #28]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	4904      	ldr	r1, [pc, #16]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40007000 	.word	0x40007000
 80041f0:	42420440 	.word	0x42420440

080041f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	2300      	movs	r3, #0
 800420e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b10      	cmp	r3, #16
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b10      	cmp	r3, #16
 800421a:	f200 808a 	bhi.w	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d045      	beq.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d075      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800422a:	e082      	b.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800422c:	4b46      	ldr	r3, [pc, #280]	@ (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004232:	4b45      	ldr	r3, [pc, #276]	@ (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d07b      	beq.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	0c9b      	lsrs	r3, r3, #18
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	4a41      	ldr	r2, [pc, #260]	@ (800434c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004248:	5cd3      	ldrb	r3, [r2, r3]
 800424a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d015      	beq.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004256:	4b3c      	ldr	r3, [pc, #240]	@ (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	0c5b      	lsrs	r3, r3, #17
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	4a3b      	ldr	r2, [pc, #236]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004262:	5cd3      	ldrb	r3, [r2, r3]
 8004264:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004270:	4a38      	ldr	r2, [pc, #224]	@ (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	fbb2 f2f3 	udiv	r2, r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	e004      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4a34      	ldr	r2, [pc, #208]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800428c:	4b2e      	ldr	r3, [pc, #184]	@ (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004298:	d102      	bne.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	61bb      	str	r3, [r7, #24]
      break;
 800429e:	e04a      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4a2d      	ldr	r2, [pc, #180]	@ (800435c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	61bb      	str	r3, [r7, #24]
      break;
 80042ae:	e042      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80042b0:	4b25      	ldr	r3, [pc, #148]	@ (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c0:	d108      	bne.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80042cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	e01f      	b.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042de:	d109      	bne.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80042e0:	4b19      	ldr	r3, [pc, #100]	@ (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80042ec:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	e00f      	b.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042fe:	d11c      	bne.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004300:	4b11      	ldr	r3, [pc, #68]	@ (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d016      	beq.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800430c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004310:	61bb      	str	r3, [r7, #24]
      break;
 8004312:	e012      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004314:	e011      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004316:	f7ff fe85 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 800431a:	4602      	mov	r2, r0
 800431c:	4b0a      	ldr	r3, [pc, #40]	@ (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0b9b      	lsrs	r3, r3, #14
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	3301      	adds	r3, #1
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	61bb      	str	r3, [r7, #24]
      break;
 8004330:	e004      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004332:	bf00      	nop
 8004334:	e002      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800433a:	bf00      	nop
    }
  }
  return (frequency);
 800433c:	69bb      	ldr	r3, [r7, #24]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	08006bc0 	.word	0x08006bc0
 8004350:	08006bd0 	.word	0x08006bd0
 8004354:	007a1200 	.word	0x007a1200
 8004358:	003d0900 	.word	0x003d0900
 800435c:	aaaaaaab 	.word	0xaaaaaaab

08004360 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e076      	b.n	8004460 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d108      	bne.n	800438c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004382:	d009      	beq.n	8004398 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	61da      	str	r2, [r3, #28]
 800438a:	e005      	b.n	8004398 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fe f888 	bl	80024c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441c:	ea42 0103 	orr.w	r1, r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004424:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	0c1a      	lsrs	r2, r3, #16
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f002 0204 	and.w	r2, r2, #4
 800443e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69da      	ldr	r2, [r3, #28]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800444e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_SPI_Transmit+0x22>
 8004486:	2302      	movs	r3, #2
 8004488:	e12d      	b.n	80046e6 <HAL_SPI_Transmit+0x27e>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004492:	f7fe f9ad 	bl	80027f0 <HAL_GetTick>
 8004496:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d002      	beq.n	80044ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044a8:	2302      	movs	r3, #2
 80044aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044ac:	e116      	b.n	80046dc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_SPI_Transmit+0x52>
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044be:	e10d      	b.n	80046dc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2203      	movs	r2, #3
 80044c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	88fa      	ldrh	r2, [r7, #6]
 80044d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	88fa      	ldrh	r2, [r7, #6]
 80044de:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004506:	d10f      	bne.n	8004528 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004516:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004526:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004532:	2b40      	cmp	r3, #64	@ 0x40
 8004534:	d007      	beq.n	8004546 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004544:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800454e:	d14f      	bne.n	80045f0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_SPI_Transmit+0xf6>
 8004558:	8afb      	ldrh	r3, [r7, #22]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d142      	bne.n	80045e4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	881a      	ldrh	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456e:	1c9a      	adds	r2, r3, #2
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004582:	e02f      	b.n	80045e4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b02      	cmp	r3, #2
 8004590:	d112      	bne.n	80045b8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	881a      	ldrh	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	1c9a      	adds	r2, r3, #2
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045b6:	e015      	b.n	80045e4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045b8:	f7fe f91a 	bl	80027f0 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d803      	bhi.n	80045d0 <HAL_SPI_Transmit+0x168>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d102      	bne.n	80045d6 <HAL_SPI_Transmit+0x16e>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80045e2:	e07b      	b.n	80046dc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1ca      	bne.n	8004584 <HAL_SPI_Transmit+0x11c>
 80045ee:	e050      	b.n	8004692 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_SPI_Transmit+0x196>
 80045f8:	8afb      	ldrh	r3, [r7, #22]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d144      	bne.n	8004688 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	7812      	ldrb	r2, [r2, #0]
 800460a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004624:	e030      	b.n	8004688 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b02      	cmp	r3, #2
 8004632:	d113      	bne.n	800465c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	7812      	ldrb	r2, [r2, #0]
 8004640:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	86da      	strh	r2, [r3, #54]	@ 0x36
 800465a:	e015      	b.n	8004688 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800465c:	f7fe f8c8 	bl	80027f0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d803      	bhi.n	8004674 <HAL_SPI_Transmit+0x20c>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d102      	bne.n	800467a <HAL_SPI_Transmit+0x212>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004686:	e029      	b.n	80046dc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1c9      	bne.n	8004626 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	6839      	ldr	r1, [r7, #0]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f8b2 	bl	8004800 <SPI_EndRxTxTransaction>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2220      	movs	r2, #32
 80046a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046b0:	2300      	movs	r3, #0
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e003      	b.n	80046dc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80046e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004700:	f7fe f876 	bl	80027f0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	4413      	add	r3, r2
 800470e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004710:	f7fe f86e 	bl	80027f0 <HAL_GetTick>
 8004714:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004716:	4b39      	ldr	r3, [pc, #228]	@ (80047fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	015b      	lsls	r3, r3, #5
 800471c:	0d1b      	lsrs	r3, r3, #20
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	fb02 f303 	mul.w	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004726:	e054      	b.n	80047d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d050      	beq.n	80047d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004730:	f7fe f85e 	bl	80027f0 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	429a      	cmp	r2, r3
 800473e:	d902      	bls.n	8004746 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d13d      	bne.n	80047c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004754:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800475e:	d111      	bne.n	8004784 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004768:	d004      	beq.n	8004774 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004772:	d107      	bne.n	8004784 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004782:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478c:	d10f      	bne.n	80047ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e017      	b.n	80047f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4013      	ands	r3, r2
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	429a      	cmp	r2, r3
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d19b      	bne.n	8004728 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	2000001c 	.word	0x2000001c

08004800 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2200      	movs	r2, #0
 8004814:	2180      	movs	r1, #128	@ 0x80
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f7ff ff6a 	bl	80046f0 <SPI_WaitFlagStateUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004826:	f043 0220 	orr.w	r2, r3, #32
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e000      	b.n	8004834 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e041      	b.n	80048d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd fe7e 	bl	8002564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f000 faa2 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d001      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e03a      	b.n	800496a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a18      	ldr	r2, [pc, #96]	@ (8004974 <HAL_TIM_Base_Start_IT+0x98>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x58>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800491e:	d009      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x58>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a14      	ldr	r2, [pc, #80]	@ (8004978 <HAL_TIM_Base_Start_IT+0x9c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_TIM_Base_Start_IT+0x58>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a13      	ldr	r2, [pc, #76]	@ (800497c <HAL_TIM_Base_Start_IT+0xa0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d111      	bne.n	8004958 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b06      	cmp	r3, #6
 8004944:	d010      	beq.n	8004968 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004956:	e007      	b.n	8004968 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40000400 	.word	0x40000400
 800497c:	40000800 	.word	0x40000800

08004980 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6a1a      	ldr	r2, [r3, #32]
 800499e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10f      	bne.n	80049c8 <HAL_TIM_Base_Stop_IT+0x48>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6a1a      	ldr	r2, [r3, #32]
 80049ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d107      	bne.n	80049c8 <HAL_TIM_Base_Stop_IT+0x48>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0201 	bic.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d122      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d11b      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0202 	mvn.w	r2, #2
 8004a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9b4 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9a7 	bl	8004d7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f9b6 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d122      	bne.n	8004a8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0204 	mvn.w	r2, #4
 8004a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2202      	movs	r2, #2
 8004a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f98a 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f97d 	bl	8004d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f98c 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d122      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d11b      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0208 	mvn.w	r2, #8
 8004ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f960 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 8004acc:	e005      	b.n	8004ada <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f953 	bl	8004d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f962 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b10      	cmp	r3, #16
 8004aec:	d122      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b10      	cmp	r3, #16
 8004afa:	d11b      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0210 	mvn.w	r2, #16
 8004b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f936 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f929 	bl	8004d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f938 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d10e      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d107      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0201 	mvn.w	r2, #1
 8004b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fc feae 	bl	80018bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6a:	2b80      	cmp	r3, #128	@ 0x80
 8004b6c:	d10e      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b78:	2b80      	cmp	r3, #128	@ 0x80
 8004b7a:	d107      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fa7b 	bl	8005082 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b96:	2b40      	cmp	r3, #64	@ 0x40
 8004b98:	d10e      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba4:	2b40      	cmp	r3, #64	@ 0x40
 8004ba6:	d107      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f8fc 	bl	8004db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d10e      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d107      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0220 	mvn.w	r2, #32
 8004bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa46 	bl	8005070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_TIM_ConfigClockSource+0x1c>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e0b4      	b.n	8004d72 <HAL_TIM_ConfigClockSource+0x186>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c40:	d03e      	beq.n	8004cc0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c46:	f200 8087 	bhi.w	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4e:	f000 8086 	beq.w	8004d5e <HAL_TIM_ConfigClockSource+0x172>
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c56:	d87f      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	2b70      	cmp	r3, #112	@ 0x70
 8004c5a:	d01a      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0xa6>
 8004c5c:	2b70      	cmp	r3, #112	@ 0x70
 8004c5e:	d87b      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b60      	cmp	r3, #96	@ 0x60
 8004c62:	d050      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x11a>
 8004c64:	2b60      	cmp	r3, #96	@ 0x60
 8004c66:	d877      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b50      	cmp	r3, #80	@ 0x50
 8004c6a:	d03c      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c6c:	2b50      	cmp	r3, #80	@ 0x50
 8004c6e:	d873      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b40      	cmp	r3, #64	@ 0x40
 8004c72:	d058      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x13a>
 8004c74:	2b40      	cmp	r3, #64	@ 0x40
 8004c76:	d86f      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b30      	cmp	r3, #48	@ 0x30
 8004c7a:	d064      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x15a>
 8004c7c:	2b30      	cmp	r3, #48	@ 0x30
 8004c7e:	d86b      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d060      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x15a>
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d867      	bhi.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d05c      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d05a      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x15a>
 8004c90:	e062      	b.n	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ca2:	f000 f968 	bl	8004f76 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	609a      	str	r2, [r3, #8]
      break;
 8004cbe:	e04f      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cd0:	f000 f951 	bl	8004f76 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ce2:	609a      	str	r2, [r3, #8]
      break;
 8004ce4:	e03c      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f000 f8c8 	bl	8004e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2150      	movs	r1, #80	@ 0x50
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 f91f 	bl	8004f42 <TIM_ITRx_SetConfig>
      break;
 8004d04:	e02c      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d12:	461a      	mov	r2, r3
 8004d14:	f000 f8e6 	bl	8004ee4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2160      	movs	r1, #96	@ 0x60
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f90f 	bl	8004f42 <TIM_ITRx_SetConfig>
      break;
 8004d24:	e01c      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	461a      	mov	r2, r3
 8004d34:	f000 f8a8 	bl	8004e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2140      	movs	r1, #64	@ 0x40
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f8ff 	bl	8004f42 <TIM_ITRx_SetConfig>
      break;
 8004d44:	e00c      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4610      	mov	r0, r2
 8004d52:	f000 f8f6 	bl	8004f42 <TIM_ITRx_SetConfig>
      break;
 8004d56:	e003      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d5c:	e000      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr
	...

08004dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a29      	ldr	r2, [pc, #164]	@ (8004e7c <TIM_Base_SetConfig+0xb8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00b      	beq.n	8004df4 <TIM_Base_SetConfig+0x30>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de2:	d007      	beq.n	8004df4 <TIM_Base_SetConfig+0x30>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a26      	ldr	r2, [pc, #152]	@ (8004e80 <TIM_Base_SetConfig+0xbc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_Base_SetConfig+0x30>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a25      	ldr	r2, [pc, #148]	@ (8004e84 <TIM_Base_SetConfig+0xc0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d108      	bne.n	8004e06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1c      	ldr	r2, [pc, #112]	@ (8004e7c <TIM_Base_SetConfig+0xb8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0x62>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0x62>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a19      	ldr	r2, [pc, #100]	@ (8004e80 <TIM_Base_SetConfig+0xbc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0x62>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a18      	ldr	r2, [pc, #96]	@ (8004e84 <TIM_Base_SetConfig+0xc0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a07      	ldr	r2, [pc, #28]	@ (8004e7c <TIM_Base_SetConfig+0xb8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d103      	bne.n	8004e6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	615a      	str	r2, [r3, #20]
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800

08004e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0201 	bic.w	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 030a 	bic.w	r3, r3, #10
 8004ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f023 0210 	bic.w	r2, r3, #16
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	031b      	lsls	r3, r3, #12
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	621a      	str	r2, [r3, #32]
}
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f043 0307 	orr.w	r3, r3, #7
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	609a      	str	r2, [r3, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	021a      	lsls	r2, r3, #8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	609a      	str	r2, [r3, #8]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e046      	b.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a16      	ldr	r2, [pc, #88]	@ (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00e      	beq.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005018:	d009      	beq.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a12      	ldr	r2, [pc, #72]	@ (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d004      	beq.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a10      	ldr	r2, [pc, #64]	@ (800506c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d10c      	bne.n	8005048 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	4313      	orrs	r3, r2
 800503e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40000400 	.word	0x40000400
 800506c:	40000800 	.word	0x40000800

08005070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e042      	b.n	800512c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fd fa76 	bl	80025ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2224      	movs	r2, #36	@ 0x24
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f91d 	bl	8005318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695a      	ldr	r2, [r3, #20]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800510c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	@ 0x28
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	d16d      	bne.n	8005230 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_UART_Transmit+0x2c>
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e066      	b.n	8005232 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2221      	movs	r2, #33	@ 0x21
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005172:	f7fd fb3d 	bl	80027f0 <HAL_GetTick>
 8005176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	88fa      	ldrh	r2, [r7, #6]
 8005182:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800518c:	d108      	bne.n	80051a0 <HAL_UART_Transmit+0x6c>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e003      	b.n	80051a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051a8:	e02a      	b.n	8005200 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2200      	movs	r2, #0
 80051b2:	2180      	movs	r1, #128	@ 0x80
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f840 	bl	800523a <UART_WaitOnFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e036      	b.n	8005232 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10b      	bne.n	80051e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	3302      	adds	r3, #2
 80051de:	61bb      	str	r3, [r7, #24]
 80051e0:	e007      	b.n	80051f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	781a      	ldrb	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	3301      	adds	r3, #1
 80051f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1cf      	bne.n	80051aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2200      	movs	r2, #0
 8005212:	2140      	movs	r1, #64	@ 0x40
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f810 	bl	800523a <UART_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e006      	b.n	8005232 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b090      	sub	sp, #64	@ 0x40
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800524a:	e050      	b.n	80052ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d04c      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <UART_WaitOnFlagUntilTimeout+0x30>
 800525a:	f7fd fac9 	bl	80027f0 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005266:	429a      	cmp	r2, r3
 8005268:	d241      	bcs.n	80052ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	330c      	adds	r3, #12
 8005288:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800528a:	637a      	str	r2, [r7, #52]	@ 0x34
 800528c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005290:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e5      	bne.n	800526a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3314      	adds	r3, #20
 80052a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	e853 3f00 	ldrex	r3, [r3]
 80052ac:	613b      	str	r3, [r7, #16]
   return(result);
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f023 0301 	bic.w	r3, r3, #1
 80052b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3314      	adds	r3, #20
 80052bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052be:	623a      	str	r2, [r7, #32]
 80052c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	69f9      	ldr	r1, [r7, #28]
 80052c4:	6a3a      	ldr	r2, [r7, #32]
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e5      	bne.n	800529e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e00f      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4013      	ands	r3, r2
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	429a      	cmp	r2, r3
 800530a:	d09f      	beq.n	800524c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3740      	adds	r7, #64	@ 0x40
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005352:	f023 030c 	bic.w	r3, r3, #12
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	430b      	orrs	r3, r1
 800535e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2c      	ldr	r2, [pc, #176]	@ (800542c <UART_SetConfig+0x114>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d103      	bne.n	8005388 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005380:	f7fe fe50 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	e002      	b.n	800538e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005388:	f7fe fe38 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 800538c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009a      	lsls	r2, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	4a22      	ldr	r2, [pc, #136]	@ (8005430 <UART_SetConfig+0x118>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	0119      	lsls	r1, r3, #4
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009a      	lsls	r2, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005430 <UART_SetConfig+0x118>)
 80053c6:	fba3 0302 	umull	r0, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2064      	movs	r0, #100	@ 0x64
 80053ce:	fb00 f303 	mul.w	r3, r0, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	3332      	adds	r3, #50	@ 0x32
 80053d8:	4a15      	ldr	r2, [pc, #84]	@ (8005430 <UART_SetConfig+0x118>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053e4:	4419      	add	r1, r3
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4613      	mov	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	009a      	lsls	r2, r3, #2
 80053f0:	441a      	add	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005430 <UART_SetConfig+0x118>)
 80053fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	2064      	movs	r0, #100	@ 0x64
 8005406:	fb00 f303 	mul.w	r3, r0, r3
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	3332      	adds	r3, #50	@ 0x32
 8005410:	4a07      	ldr	r2, [pc, #28]	@ (8005430 <UART_SetConfig+0x118>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	f003 020f 	and.w	r2, r3, #15
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	440a      	add	r2, r1
 8005422:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40013800 	.word	0x40013800
 8005430:	51eb851f 	.word	0x51eb851f

08005434 <__itoa>:
 8005434:	1e93      	subs	r3, r2, #2
 8005436:	2b22      	cmp	r3, #34	@ 0x22
 8005438:	b510      	push	{r4, lr}
 800543a:	460c      	mov	r4, r1
 800543c:	d904      	bls.n	8005448 <__itoa+0x14>
 800543e:	2300      	movs	r3, #0
 8005440:	461c      	mov	r4, r3
 8005442:	700b      	strb	r3, [r1, #0]
 8005444:	4620      	mov	r0, r4
 8005446:	bd10      	pop	{r4, pc}
 8005448:	2a0a      	cmp	r2, #10
 800544a:	d109      	bne.n	8005460 <__itoa+0x2c>
 800544c:	2800      	cmp	r0, #0
 800544e:	da07      	bge.n	8005460 <__itoa+0x2c>
 8005450:	232d      	movs	r3, #45	@ 0x2d
 8005452:	700b      	strb	r3, [r1, #0]
 8005454:	2101      	movs	r1, #1
 8005456:	4240      	negs	r0, r0
 8005458:	4421      	add	r1, r4
 800545a:	f000 f805 	bl	8005468 <__utoa>
 800545e:	e7f1      	b.n	8005444 <__itoa+0x10>
 8005460:	2100      	movs	r1, #0
 8005462:	e7f9      	b.n	8005458 <__itoa+0x24>

08005464 <itoa>:
 8005464:	f7ff bfe6 	b.w	8005434 <__itoa>

08005468 <__utoa>:
 8005468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546a:	b08b      	sub	sp, #44	@ 0x2c
 800546c:	4605      	mov	r5, r0
 800546e:	460b      	mov	r3, r1
 8005470:	466e      	mov	r6, sp
 8005472:	4c1d      	ldr	r4, [pc, #116]	@ (80054e8 <__utoa+0x80>)
 8005474:	f104 0c20 	add.w	ip, r4, #32
 8005478:	4637      	mov	r7, r6
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	6861      	ldr	r1, [r4, #4]
 800547e:	3408      	adds	r4, #8
 8005480:	c703      	stmia	r7!, {r0, r1}
 8005482:	4564      	cmp	r4, ip
 8005484:	463e      	mov	r6, r7
 8005486:	d1f7      	bne.n	8005478 <__utoa+0x10>
 8005488:	7921      	ldrb	r1, [r4, #4]
 800548a:	6820      	ldr	r0, [r4, #0]
 800548c:	7139      	strb	r1, [r7, #4]
 800548e:	1e91      	subs	r1, r2, #2
 8005490:	2922      	cmp	r1, #34	@ 0x22
 8005492:	6038      	str	r0, [r7, #0]
 8005494:	f04f 0100 	mov.w	r1, #0
 8005498:	d904      	bls.n	80054a4 <__utoa+0x3c>
 800549a:	7019      	strb	r1, [r3, #0]
 800549c:	460b      	mov	r3, r1
 800549e:	4618      	mov	r0, r3
 80054a0:	b00b      	add	sp, #44	@ 0x2c
 80054a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054a4:	1e58      	subs	r0, r3, #1
 80054a6:	4684      	mov	ip, r0
 80054a8:	fbb5 f7f2 	udiv	r7, r5, r2
 80054ac:	fb02 5617 	mls	r6, r2, r7, r5
 80054b0:	3628      	adds	r6, #40	@ 0x28
 80054b2:	446e      	add	r6, sp
 80054b4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80054b8:	460c      	mov	r4, r1
 80054ba:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80054be:	462e      	mov	r6, r5
 80054c0:	42b2      	cmp	r2, r6
 80054c2:	463d      	mov	r5, r7
 80054c4:	f101 0101 	add.w	r1, r1, #1
 80054c8:	d9ee      	bls.n	80054a8 <__utoa+0x40>
 80054ca:	2200      	movs	r2, #0
 80054cc:	545a      	strb	r2, [r3, r1]
 80054ce:	1919      	adds	r1, r3, r4
 80054d0:	1aa5      	subs	r5, r4, r2
 80054d2:	42aa      	cmp	r2, r5
 80054d4:	dae3      	bge.n	800549e <__utoa+0x36>
 80054d6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80054da:	780e      	ldrb	r6, [r1, #0]
 80054dc:	3201      	adds	r2, #1
 80054de:	7006      	strb	r6, [r0, #0]
 80054e0:	f801 5901 	strb.w	r5, [r1], #-1
 80054e4:	e7f4      	b.n	80054d0 <__utoa+0x68>
 80054e6:	bf00      	nop
 80054e8:	08006bd2 	.word	0x08006bd2

080054ec <memset>:
 80054ec:	4603      	mov	r3, r0
 80054ee:	4402      	add	r2, r0
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d100      	bne.n	80054f6 <memset+0xa>
 80054f4:	4770      	bx	lr
 80054f6:	f803 1b01 	strb.w	r1, [r3], #1
 80054fa:	e7f9      	b.n	80054f0 <memset+0x4>

080054fc <__libc_init_array>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	2600      	movs	r6, #0
 8005500:	4d0c      	ldr	r5, [pc, #48]	@ (8005534 <__libc_init_array+0x38>)
 8005502:	4c0d      	ldr	r4, [pc, #52]	@ (8005538 <__libc_init_array+0x3c>)
 8005504:	1b64      	subs	r4, r4, r5
 8005506:	10a4      	asrs	r4, r4, #2
 8005508:	42a6      	cmp	r6, r4
 800550a:	d109      	bne.n	8005520 <__libc_init_array+0x24>
 800550c:	f000 f81a 	bl	8005544 <_init>
 8005510:	2600      	movs	r6, #0
 8005512:	4d0a      	ldr	r5, [pc, #40]	@ (800553c <__libc_init_array+0x40>)
 8005514:	4c0a      	ldr	r4, [pc, #40]	@ (8005540 <__libc_init_array+0x44>)
 8005516:	1b64      	subs	r4, r4, r5
 8005518:	10a4      	asrs	r4, r4, #2
 800551a:	42a6      	cmp	r6, r4
 800551c:	d105      	bne.n	800552a <__libc_init_array+0x2e>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	f855 3b04 	ldr.w	r3, [r5], #4
 8005524:	4798      	blx	r3
 8005526:	3601      	adds	r6, #1
 8005528:	e7ee      	b.n	8005508 <__libc_init_array+0xc>
 800552a:	f855 3b04 	ldr.w	r3, [r5], #4
 800552e:	4798      	blx	r3
 8005530:	3601      	adds	r6, #1
 8005532:	e7f2      	b.n	800551a <__libc_init_array+0x1e>
 8005534:	08006bf8 	.word	0x08006bf8
 8005538:	08006bf8 	.word	0x08006bf8
 800553c:	08006bf8 	.word	0x08006bf8
 8005540:	08006bfc 	.word	0x08006bfc

08005544 <_init>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr

08005550 <_fini>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	bf00      	nop
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr
